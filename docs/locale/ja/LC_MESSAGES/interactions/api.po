
msgid ""
msgstr ""
"Project-Id-Version: discordpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-06 11:01+0900\n"
"PO-Revision-Date: 2022-03-06 11:27+0900\n"
"Last-Translator: \n"
"Language: ja_JP\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../interactions/api.rst:4
msgid "Interactions API Reference"
msgstr ""

#: ../../interactions/api.rst:6
msgid ""
"The following section outlines the API of interactions, as implemented by"
" the library."
msgstr ""

#: ../../interactions/api.rst:8
msgid "For documentation about the rest of the library, check :doc:`api`."
msgstr ""

#: ../../interactions/api.rst:11
msgid "Models"
msgstr ""

#: ../../interactions/api.rst:13
msgid ""
"Similar to :ref:`discord_api_models`, these are not meant to be "
"constructed by the user."
msgstr ""

#: ../../interactions/api.rst:16
msgid "Interaction"
msgstr ""

#: discord.interactions.Interaction:1 of
msgid "Represents a Discord interaction."
msgstr ""

#: discord.interactions.Interaction:3 of
msgid ""
"An interaction happens when a user does an action that needs to be "
"notified. Current examples are slash commands and components."
msgstr ""

#: discord.interactions.Interaction:10 of
msgid "The interaction's ID."
msgstr ""

#: ../../docstring discord.Interaction.channel discord.Interaction.client
#: discord.Interaction.followup discord.Interaction.guild
#: discord.Interaction.permissions discord.Interaction.response
#: discord.TextInput.default discord.app_commands.AppCommandChannel.created_at
#: discord.app_commands.AppCommandChannel.guild
#: discord.app_commands.AppCommandChannel.mention
#: discord.app_commands.AppCommandThread.guild
#: discord.app_commands.AppCommandThread.mention
#: discord.app_commands.AppCommandThread.parent
#: discord.app_commands.Command.root_parent
#: discord.app_commands.Group.root_parent discord.app_commands.commands.Command
#: discord.app_commands.commands.ContextMenu
#: discord.app_commands.commands.Group
#: discord.app_commands.errors.CommandAlreadyRegistered
#: discord.app_commands.errors.CommandInvokeError
#: discord.app_commands.errors.CommandNotFound
#: discord.app_commands.errors.CommandSignatureMismatch
#: discord.app_commands.errors.TransformerError
#: discord.app_commands.models.AppCommand
#: discord.app_commands.models.AppCommandChannel
#: discord.app_commands.models.AppCommandGroup
#: discord.app_commands.models.AppCommandThread
#: discord.app_commands.models.Argument discord.components.ActionRow
#: discord.components.Button discord.components.Component
#: discord.components.SelectMenu discord.components.SelectOption
#: discord.components.TextInput discord.interactions.Interaction
#: discord.ui.Button.custom_id discord.ui.Button.disabled
#: discord.ui.Button.emoji discord.ui.Button.label discord.ui.Button.style
#: discord.ui.Button.url discord.ui.Button.view discord.ui.Item.view
#: discord.ui.Select.custom_id discord.ui.Select.disabled
#: discord.ui.Select.max_values discord.ui.Select.min_values
#: discord.ui.Select.options discord.ui.Select.placeholder
#: discord.ui.Select.values discord.ui.Select.view
#: discord.ui.TextInput.custom_id discord.ui.TextInput.default
#: discord.ui.TextInput.label discord.ui.TextInput.max_length
#: discord.ui.TextInput.min_length discord.ui.TextInput.placeholder
#: discord.ui.TextInput.required discord.ui.TextInput.style
#: discord.ui.TextInput.value discord.ui.TextInput.view discord.ui.modal.Modal
#: discord.ui.view.View of
msgid "type"
msgstr ""

#: discord.app_commands.models.AppCommand:30
#: discord.app_commands.models.AppCommand:36
#: discord.app_commands.models.AppCommandChannel:27
#: discord.app_commands.models.AppCommandChannel:52
#: discord.app_commands.models.AppCommandThread:27
#: discord.app_commands.models.AppCommandThread:45
#: discord.app_commands.models.AppCommandThread:58
#: discord.app_commands.models.AppCommandThread:90
#: discord.app_commands.namespace.Namespace:26 discord.components.SelectMenu:30
#: discord.components.SelectMenu:37 discord.interactions.Interaction:12
#: discord.interactions.Interaction:36 discord.ui.Select.max_values:3
#: discord.ui.Select.min_values:3 discord.ui.TextInput.max_length:3
#: discord.ui.TextInput.min_length:3 of
msgid ":class:`int`"
msgstr ""

#: discord.interactions.Interaction:16 of
msgid "The interaction type."
msgstr ""

#: discord.interactions.Interaction:18 of
msgid ":class:`InteractionType`"
msgstr ""

#: discord.interactions.Interaction:22 of
msgid "The guild ID the interaction was sent from."
msgstr ""

#: discord.app_commands.errors.CommandAlreadyRegistered:18
#: discord.app_commands.models.AppCommandThread:83
#: discord.components.TextInput:49 discord.components.TextInput:55
#: discord.interactions.Interaction:24 discord.interactions.Interaction:30 of
msgid "Optional[:class:`int`]"
msgstr ""

#: discord.interactions.Interaction:28 of
msgid "The channel ID the interaction was sent from."
msgstr ""

#: discord.interactions.Interaction:34 of
msgid "The application ID that the interaction was for."
msgstr ""

#: discord.interactions.Interaction:40 of
msgid "The user or member that sent the interaction."
msgstr ""

#: discord.interactions.Interaction:42 of
msgid "Union[:class:`User`, :class:`Member`]"
msgstr ""

#: discord.interactions.Interaction:46 of
msgid "The message that sent this interaction."
msgstr ""

#: discord.interactions.Interaction:48 of
msgid "Optional[:class:`Message`]"
msgstr ""

#: discord.interactions.Interaction:52 of
msgid "The token to continue the interaction. These are valid for 15 minutes."
msgstr ""

#: discord.app_commands.AppCommandChannel.mention:3
#: discord.app_commands.AppCommandThread.mention:3
#: discord.app_commands.commands.Command:16
#: discord.app_commands.commands.Command:29
#: discord.app_commands.commands.ContextMenu:15
#: discord.app_commands.commands.Group:12
#: discord.app_commands.commands.Group:20
#: discord.app_commands.errors.CommandAlreadyRegistered:11
#: discord.app_commands.errors.CommandNotFound:11
#: discord.app_commands.models.AppCommand:48
#: discord.app_commands.models.AppCommand:54
#: discord.app_commands.models.AppCommandChannel:39
#: discord.app_commands.models.AppCommandGroup:15
#: discord.app_commands.models.AppCommandGroup:21
#: discord.app_commands.models.AppCommandThread:39
#: discord.app_commands.models.Argument:15
#: discord.app_commands.models.Argument:21
#: discord.app_commands.namespace.Namespace:24
#: discord.components.SelectOption:12 discord.components.SelectOption:20
#: discord.components.TextInput:19 discord.interactions.Interaction:55
#: discord.ui.Select.custom_id:3 discord.ui.TextInput.custom_id:3
#: discord.ui.TextInput.default:3 discord.ui.TextInput.label:3
#: discord.ui.TextInput.placeholder:3 discord.ui.modal.Modal:27
#: discord.ui.modal.Modal:39 of
msgid ":class:`str`"
msgstr ""

#: discord.interactions.Interaction:59 of
msgid "The raw interaction data."
msgstr ""

#: discord.interactions.Interaction:61 of
msgid ":class:`dict`"
msgstr ""

#: discord.Interaction.client:1 of
msgid "The client that is handling this interaction."
msgstr ""

#: discord.Interaction.client:3 of
msgid ":class:`Client`"
msgstr ""

#: discord.Interaction.guild:1 of
msgid "The guild the interaction was sent from."
msgstr ""

#: discord.Interaction.guild:3 of
msgid "Optional[:class:`Guild`]"
msgstr ""

#: ../../docstring discord.Interaction.channel:1 of
msgid "The channel the interaction was sent from."
msgstr ""

#: ../../docstring discord.Interaction.channel:3 of
msgid ""
"Note that due to a Discord limitation, DM channels are not resolved since"
" there is no data to complete them. These are :class:`PartialMessageable`"
" instead."
msgstr ""

#: ../../docstring discord.Interaction.channel:6 of
msgid ""
"Optional[Union[:class:`abc.GuildChannel`, :class:`PartialMessageable`, "
":class:`Thread`]]"
msgstr ""

#: discord.Interaction.permissions:1 of
msgid ""
"The resolved permissions of the member in the channel, including "
"overwrites."
msgstr ""

#: discord.Interaction.permissions:3 of
msgid ""
"In a non-guild context where this doesn't apply, an empty permissions "
"object is returned."
msgstr ""

#: discord.Interaction.permissions:5 of
msgid ":class:`Permissions`"
msgstr ""

#: ../../docstring discord.Interaction.response:1 of
msgid "Returns an object responsible for handling responding to the interaction."
msgstr ""

#: ../../docstring discord.Interaction.response:3 of
msgid ""
"A response can only be done once. If secondary messages need to be sent, "
"consider using :attr:`followup` instead."
msgstr ""

#: ../../docstring discord.Interaction.response:6 of
msgid ":class:`InteractionResponse`"
msgstr ""

#: ../../docstring discord.Interaction.followup:1 of
msgid "Returns the follow up webhook for follow up interactions."
msgstr ""

#: ../../docstring discord.Interaction.followup:3 of
msgid ":class:`Webhook`"
msgstr ""

#: discord.app_commands.commands.Group.on_error:1
#: discord.app_commands.models.AppCommandChannel.fetch:1
#: discord.app_commands.models.AppCommandThread.fetch:1
#: discord.app_commands.transformers.Transformer.transform:1
#: discord.app_commands.tree.CommandTree.call:1
#: discord.app_commands.tree.CommandTree.fetch_commands:1
#: discord.app_commands.tree.CommandTree.on_error:1
#: discord.app_commands.tree.CommandTree.sync:1
#: discord.interactions.Interaction.delete_original_message:1
#: discord.interactions.Interaction.edit_original_message:1
#: discord.interactions.Interaction.original_message:1
#: discord.interactions.InteractionMessage.add_files:1
#: discord.interactions.InteractionMessage.delete:1
#: discord.interactions.InteractionMessage.edit:1
#: discord.interactions.InteractionMessage.remove_attachments:1
#: discord.interactions.InteractionResponse.autocomplete:1
#: discord.interactions.InteractionResponse.defer:1
#: discord.interactions.InteractionResponse.edit_message:1
#: discord.interactions.InteractionResponse.pong:1
#: discord.interactions.InteractionResponse.send_message:1
#: discord.interactions.InteractionResponse.send_modal:1
#: discord.ui.item.Item.callback:1 discord.ui.modal.Modal.on_error:1
#: discord.ui.modal.Modal.on_submit:1 discord.ui.view.View.interaction_check:1
#: discord.ui.view.View.on_error:1 discord.ui.view.View.on_timeout:1 of
msgid "|coro|"
msgstr ""

#: discord.interactions.Interaction.original_message:3 of
msgid ""
"Fetches the original interaction response message associated with the "
"interaction."
msgstr ""

#: discord.interactions.Interaction.original_message:5 of
msgid ""
"If the interaction response was :meth:`InteractionResponse.send_message` "
"then this would return the message that was sent using that response. "
"Otherwise, this would return the message that triggered the interaction."
msgstr ""

#: discord.interactions.Interaction.original_message:9 of
msgid "Repeated calls to this will return a cached value."
msgstr ""

#: discord.app_commands.commands.Command.autocomplete
#: discord.app_commands.commands.Command.error
#: discord.app_commands.commands.Group.add_command
#: discord.app_commands.commands.choices discord.app_commands.commands.describe
#: discord.app_commands.models.AppCommandChannel.fetch
#: discord.app_commands.models.AppCommandThread.fetch
#: discord.app_commands.tree.CommandTree.add_command
#: discord.app_commands.tree.CommandTree.call
#: discord.app_commands.tree.CommandTree.fetch_commands
#: discord.app_commands.tree.CommandTree.sync
#: discord.interactions.Interaction.delete_original_message
#: discord.interactions.Interaction.edit_original_message
#: discord.interactions.Interaction.original_message
#: discord.interactions.InteractionMessage.add_files
#: discord.interactions.InteractionMessage.delete
#: discord.interactions.InteractionMessage.edit
#: discord.interactions.InteractionMessage.remove_attachments
#: discord.interactions.InteractionResponse.autocomplete
#: discord.interactions.InteractionResponse.defer
#: discord.interactions.InteractionResponse.edit_message
#: discord.interactions.InteractionResponse.pong
#: discord.interactions.InteractionResponse.send_message
#: discord.interactions.InteractionResponse.send_modal
#: discord.ui.select.Select.add_option discord.ui.select.Select.append_option
#: discord.ui.view.View.add_item of
msgid "Raises"
msgstr ""

#: discord.interactions.Interaction.original_message:11 of
msgid "Fetching the original response message failed."
msgstr ""

#: discord.interactions.Interaction.original_message:12 of
msgid "The channel for the message could not be resolved."
msgstr ""

#: discord.app_commands.commands.Group.get_command
#: discord.app_commands.commands.Group.remove_command
#: discord.app_commands.models.AppCommandChannel.fetch
#: discord.app_commands.models.AppCommandChannel.resolve
#: discord.app_commands.models.AppCommandThread.fetch
#: discord.app_commands.models.AppCommandThread.resolve
#: discord.app_commands.tree.CommandTree.fetch_commands
#: discord.app_commands.tree.CommandTree.get_command
#: discord.app_commands.tree.CommandTree.get_commands
#: discord.app_commands.tree.CommandTree.remove_command
#: discord.app_commands.tree.CommandTree.sync
#: discord.interactions.Interaction.edit_original_message
#: discord.interactions.Interaction.original_message
#: discord.interactions.InteractionMessage.add_files
#: discord.interactions.InteractionMessage.edit
#: discord.interactions.InteractionMessage.remove_attachments
#: discord.ui.view.View.from_message discord.ui.view.View.interaction_check
#: discord.ui.view.View.wait of
msgid "Returns"
msgstr ""

#: discord.interactions.Interaction.original_message:14 of
msgid "The original interaction response message."
msgstr ""

#: discord.app_commands.commands.Group.get_command
#: discord.app_commands.commands.Group.remove_command
#: discord.app_commands.models.AppCommandChannel.fetch
#: discord.app_commands.models.AppCommandChannel.resolve
#: discord.app_commands.models.AppCommandThread.fetch
#: discord.app_commands.models.AppCommandThread.resolve
#: discord.app_commands.tree.CommandTree.fetch_commands
#: discord.app_commands.tree.CommandTree.get_command
#: discord.app_commands.tree.CommandTree.get_commands
#: discord.app_commands.tree.CommandTree.remove_command
#: discord.app_commands.tree.CommandTree.sync
#: discord.interactions.Interaction.edit_original_message
#: discord.interactions.Interaction.original_message
#: discord.interactions.InteractionMessage.add_files
#: discord.interactions.InteractionMessage.edit
#: discord.interactions.InteractionMessage.remove_attachments
#: discord.ui.view.View.from_message discord.ui.view.View.interaction_check
#: discord.ui.view.View.wait of
msgid "Return type"
msgstr ""

#: discord.interactions.Interaction.edit_original_message:3 of
msgid "Edits the original interaction response message."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:5 of
msgid ""
"This is a lower level interface to :meth:`InteractionMessage.edit` in "
"case you do not want to fetch the message and save an HTTP request."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:8 of
msgid ""
"This method is also the only way to edit the original message if the "
"message sent was ephemeral."
msgstr ""

#: discord.app_commands.commands.Command.autocomplete
#: discord.app_commands.commands.Command.error
#: discord.app_commands.commands.Group.add_command
#: discord.app_commands.commands.Group.command
#: discord.app_commands.commands.Group.get_command
#: discord.app_commands.commands.Group.on_error
#: discord.app_commands.commands.Group.remove_command
#: discord.app_commands.commands.choices discord.app_commands.commands.command
#: discord.app_commands.commands.context_menu
#: discord.app_commands.commands.describe discord.app_commands.models.Choice
#: discord.app_commands.transformers.Transformer.transform
#: discord.app_commands.tree.CommandTree
#: discord.app_commands.tree.CommandTree.add_command
#: discord.app_commands.tree.CommandTree.call
#: discord.app_commands.tree.CommandTree.command
#: discord.app_commands.tree.CommandTree.context_menu
#: discord.app_commands.tree.CommandTree.fetch_commands
#: discord.app_commands.tree.CommandTree.get_command
#: discord.app_commands.tree.CommandTree.get_commands
#: discord.app_commands.tree.CommandTree.on_error
#: discord.app_commands.tree.CommandTree.remove_command
#: discord.app_commands.tree.CommandTree.sync
#: discord.interactions.Interaction.edit_original_message
#: discord.interactions.InteractionMessage.add_files
#: discord.interactions.InteractionMessage.delete
#: discord.interactions.InteractionMessage.edit
#: discord.interactions.InteractionMessage.remove_attachments
#: discord.interactions.InteractionResponse.autocomplete
#: discord.interactions.InteractionResponse.defer
#: discord.interactions.InteractionResponse.edit_message
#: discord.interactions.InteractionResponse.send_message
#: discord.interactions.InteractionResponse.send_modal discord.ui.button.Button
#: discord.ui.button.button discord.ui.item.Item.callback
#: discord.ui.modal.Modal discord.ui.modal.Modal.on_error
#: discord.ui.modal.Modal.on_submit discord.ui.select.Select
#: discord.ui.select.Select.add_option discord.ui.select.Select.append_option
#: discord.ui.select.select discord.ui.text_input.TextInput
#: discord.ui.view.View discord.ui.view.View.add_item
#: discord.ui.view.View.from_message discord.ui.view.View.interaction_check
#: discord.ui.view.View.on_error discord.ui.view.View.remove_item of
msgid "Parameters"
msgstr ""

#: discord.interactions.Interaction.edit_original_message:11
#: discord.interactions.InteractionMessage.edit:5 of
msgid "The content to edit the message with or ``None`` to clear it."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:13
#: discord.interactions.InteractionMessage.edit:7
#: discord.interactions.InteractionResponse.edit_message:8 of
msgid "A list of embeds to edit the message with."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:15
#: discord.interactions.InteractionMessage.edit:9
#: discord.interactions.InteractionResponse.edit_message:10 of
msgid ""
"The embed to edit the message with. ``None`` suppresses the embeds. This "
"should not be mixed with the ``embeds`` parameter."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:18
#: discord.interactions.InteractionMessage.edit:12
#: discord.interactions.InteractionResponse.edit_message:13 of
msgid ""
"A list of attachments to keep in the message as well as new files to "
"upload. If ``[]`` is passed then all attachments are removed.  .. note::"
"      New files will always appear after current attachments."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:18
#: discord.interactions.InteractionMessage.edit:12
#: discord.interactions.InteractionResponse.edit_message:13 of
msgid ""
"A list of attachments to keep in the message as well as new files to "
"upload. If ``[]`` is passed then all attachments are removed."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:23
#: discord.interactions.InteractionMessage.edit:17
#: discord.interactions.InteractionResponse.edit_message:18 of
msgid "New files will always appear after current attachments."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:25
#: discord.interactions.InteractionMessage.edit:19
#: discord.interactions.InteractionResponse.send_message:25 of
msgid ""
"Controls the mentions being processed in this message. See "
":meth:`.abc.Messageable.send` for more information."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:28
#: discord.interactions.InteractionMessage.edit:22
#: discord.interactions.InteractionResponse.edit_message:20 of
msgid ""
"The updated view to update this message with. If ``None`` is passed then "
"the view is removed."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:32
#: discord.interactions.InteractionMessage.add_files:10
#: discord.interactions.InteractionMessage.edit:26
#: discord.interactions.InteractionMessage.remove_attachments:10
#: discord.interactions.InteractionResponse.edit_message:27 of
msgid "Editing the message failed."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:33
#: discord.interactions.InteractionMessage.edit:27 of
msgid "Edited a message that is not yours."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:34
#: discord.interactions.InteractionMessage.edit:28 of
msgid "You specified both ``embed`` and ``embeds``"
msgstr ""

#: discord.interactions.Interaction.edit_original_message:35
#: discord.interactions.InteractionMessage.edit:29
#: discord.interactions.InteractionResponse.send_message:31 of
msgid "The length of ``embeds`` was invalid."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:37
#: discord.interactions.InteractionMessage.add_files:13
#: discord.interactions.InteractionMessage.edit:31
#: discord.interactions.InteractionMessage.remove_attachments:13 of
msgid "The newly edited message."
msgstr ""

#: discord.interactions.Interaction.edit_original_message:38
#: discord.interactions.InteractionMessage.add_files:14
#: discord.interactions.InteractionMessage.edit:32
#: discord.interactions.InteractionMessage.remove_attachments:14 of
msgid ":class:`InteractionMessage`"
msgstr ""

#: discord.interactions.Interaction.delete_original_message:3 of
msgid "Deletes the original interaction response message."
msgstr ""

#: discord.interactions.Interaction.delete_original_message:5 of
msgid ""
"This is a lower level interface to :meth:`InteractionMessage.delete` in "
"case you do not want to fetch the message and save an HTTP request."
msgstr ""

#: discord.interactions.Interaction.delete_original_message:8
#: discord.interactions.InteractionMessage.delete:11 of
msgid "Deleting the message failed."
msgstr ""

#: discord.interactions.Interaction.delete_original_message:9 of
msgid "Deleted a message that is not yours."
msgstr ""

#: ../../interactions/api.rst:24
msgid "InteractionResponse"
msgstr ""

#: discord.interactions.InteractionResponse:1 of
msgid "Represents a Discord interaction response."
msgstr ""

#: discord.interactions.InteractionResponse:3 of
msgid "This type can be accessed through :attr:`Interaction.response`."
msgstr ""

#: discord.interactions.InteractionResponse.is_done:1 of
msgid ""
":class:`bool`: Indicates whether an interaction response has been done "
"before."
msgstr ""

#: discord.interactions.InteractionResponse.is_done:3 of
msgid "An interaction can only be responded to once."
msgstr ""

#: discord.interactions.InteractionResponse.defer:3 of
msgid "Defers the interaction response."
msgstr ""

#: discord.interactions.InteractionResponse.defer:5 of
msgid ""
"This is typically used when the interaction is acknowledged and a "
"secondary action will be done later."
msgstr ""

#: discord.interactions.InteractionResponse.defer:8 of
msgid "This is only supported with the following interaction types:"
msgstr ""

#: discord.interactions.InteractionResponse.defer:10 of
msgid ":attr:`InteractionType.application_command`"
msgstr ""

#: discord.interactions.InteractionResponse.defer:11 of
msgid ":attr:`InteractionType.component`"
msgstr ""

#: discord.interactions.InteractionResponse.defer:12 of
msgid ":attr:`InteractionType.modal_submit`"
msgstr ""

#: discord.interactions.InteractionResponse.defer:14 of
msgid ""
"Indicates whether the deferred message will eventually be ephemeral. This"
" only applies to :attr:`InteractionType.application_command` "
"interactions, or if ``thinking`` is ``True``."
msgstr ""

#: discord.interactions.InteractionResponse.defer:17 of
msgid ""
"Indicates whether the deferred type should be "
":attr:`InteractionResponseType.deferred_channel_message` instead of the "
"default :attr:`InteractionResponseType.deferred_message_update` if both "
"are valid. In UI terms, this is represented as if the bot is thinking of "
"a response. It is your responsibility to eventually send a followup "
"message via :attr:`Interaction.followup` to make this thinking state go "
"away. Application commands (AKA Slash commands) cannot use "
":attr:`InteractionResponseType.deferred_message_update`."
msgstr ""

#: discord.interactions.InteractionResponse.defer:24 of
msgid "Deferring the interaction failed."
msgstr ""

#: discord.interactions.InteractionResponse.autocomplete:10
#: discord.interactions.InteractionResponse.defer:25
#: discord.interactions.InteractionResponse.edit_message:29
#: discord.interactions.InteractionResponse.pong:8
#: discord.interactions.InteractionResponse.send_message:32
#: discord.interactions.InteractionResponse.send_modal:9 of
msgid "This interaction has already been responded to before."
msgstr ""

#: discord.interactions.InteractionResponse.pong:3 of
msgid "Pongs the ping interaction."
msgstr ""

#: discord.interactions.InteractionResponse.pong:5 of
msgid "This should rarely be used."
msgstr ""

#: discord.interactions.InteractionResponse.pong:7 of
msgid "Ponging the interaction failed."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:3 of
msgid "Responds to this interaction by sending a message."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:5 of
msgid "The content of the message to send."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:7 of
msgid ""
"A list of embeds to send with the content. Maximum of 10. This cannot be "
"mixed with the ``embed`` parameter."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:10 of
msgid ""
"The rich embed for the content to send. This cannot be mixed with "
"``embeds`` parameter."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:13 of
msgid "The file to upload."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:15 of
msgid "A list of files to upload. Must be a maximum of 10."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:17 of
msgid "Indicates if the message should be sent using text-to-speech."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:19 of
msgid "The view to send with the message."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:21 of
msgid ""
"Indicates if the message should only be visible to the user who started "
"the interaction. If a view is sent with an ephemeral message and it has "
"no timeout set then the timeout is set to 15 minutes."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:29 of
msgid "Sending the message failed."
msgstr ""

#: discord.interactions.InteractionResponse.send_message:30 of
msgid "You specified both ``embed`` and ``embeds`` or ``file`` and ``files``."
msgstr ""

#: discord.interactions.InteractionResponse.edit_message:3 of
msgid ""
"Responds to this interaction by editing the original message of a "
"component interaction."
msgstr ""

#: discord.interactions.InteractionResponse.edit_message:6 of
msgid "The new content to replace the message with. ``None`` removes the content."
msgstr ""

#: discord.interactions.InteractionResponse.edit_message:23 of
msgid ""
"Controls the mentions being processed in this message. See "
":meth:`.Message.edit` for more information."
msgstr ""

#: discord.interactions.InteractionResponse.edit_message:28 of
msgid "You specified both ``embed`` and ``embeds``."
msgstr ""

#: discord.interactions.InteractionResponse.send_modal:3 of
msgid "Responds to this interaction by sending a modal."
msgstr ""

#: discord.interactions.InteractionResponse.send_modal:5 of
msgid "The modal to send."
msgstr ""

#: discord.interactions.InteractionResponse.send_modal:8 of
msgid "Sending the modal failed."
msgstr ""

#: discord.interactions.InteractionResponse.autocomplete:3 of
msgid "Responds to this interaction by giving the user the choices they can use."
msgstr ""

#: discord.interactions.InteractionResponse.autocomplete:5 of
msgid "The list of new choices as the user is typing."
msgstr ""

#: discord.interactions.InteractionResponse.autocomplete:8 of
msgid "Sending the choices failed."
msgstr ""

#: discord.interactions.InteractionResponse.autocomplete:9 of
msgid "This interaction cannot respond with autocomplete."
msgstr ""

#: ../../interactions/api.rst:32
msgid "InteractionMessage"
msgstr ""

#: discord.interactions.InteractionMessage:1 of
msgid "Represents the original interaction response message."
msgstr ""

#: discord.interactions.InteractionMessage:3 of
msgid ""
"This allows you to edit or delete the message associated with the "
"interaction response. To retrieve this object see "
":meth:`Interaction.original_message`."
msgstr ""

#: discord.interactions.InteractionMessage:6 of
msgid ""
"This inherits from :class:`discord.Message` with changes to :meth:`edit` "
"and :meth:`delete` to work."
msgstr ""

#: discord.interactions.InteractionMessage.edit:3 of
msgid "Edits the message."
msgstr ""

#: discord.interactions.InteractionMessage.add_files:3 of
msgid "Adds new files to the end of the message attachments."
msgstr ""

#: discord.interactions.InteractionMessage.add_files:7 of
msgid "New files to add to the message."
msgstr ""

#: discord.interactions.InteractionMessage.add_files:11
#: discord.interactions.InteractionMessage.remove_attachments:11 of
msgid "Tried to edit a message that isn't yours."
msgstr ""

#: discord.interactions.InteractionMessage.remove_attachments:3 of
msgid "Removes attachments from the message."
msgstr ""

#: discord.interactions.InteractionMessage.remove_attachments:7 of
msgid "Attachments to remove from the message."
msgstr ""

#: discord.interactions.InteractionMessage.delete:3 of
msgid "Deletes the message."
msgstr ""

#: discord.interactions.InteractionMessage.delete:5 of
msgid ""
"If provided, the number of seconds to wait before deleting the message. "
"The waiting is done in the background and deletion failures are ignored."
msgstr ""

#: discord.interactions.InteractionMessage.delete:9 of
msgid "You do not have proper permissions to delete the message."
msgstr ""

#: discord.interactions.InteractionMessage.delete:10 of
msgid "The message was deleted already."
msgstr ""

#: ../../interactions/api.rst:40
msgid "Component"
msgstr ""

#: discord.components.Component:1 of
msgid "Represents a Discord Bot UI Kit Component."
msgstr ""

#: discord.components.Component:3 of
msgid "Currently, the only components supported by Discord are:"
msgstr ""

#: discord.components.Component:5 of
msgid ":class:`ActionRow`"
msgstr ""

#: discord.components.Component:6 of
msgid ":class:`Button`"
msgstr ""

#: discord.components.Component:7 of
msgid ":class:`SelectMenu`"
msgstr ""

#: discord.components.Component:9 of
msgid "This class is abstract and cannot be instantiated."
msgstr ""

#: discord.components.ActionRow:11 discord.components.Component:15 of
msgid "The type of component."
msgstr ""

#: discord.components.ActionRow:13 discord.components.Component:17 of
msgid ":class:`ComponentType`"
msgstr ""

#: ../../interactions/api.rst:48
msgid "ActionRow"
msgstr ""

#: discord.components.ActionRow:1 of
msgid "Represents a Discord Bot UI Kit Action Row."
msgstr ""

#: discord.components.ActionRow:3 of
msgid "This is a component that holds up to 5 children components in a row."
msgstr ""

#: discord.components.ActionRow:5 discord.components.Button:3 of
msgid "This inherits from :class:`Component`."
msgstr ""

#: discord.components.ActionRow:17 of
msgid "The children components that this holds, if any."
msgstr ""

#: discord.components.ActionRow:19 of
msgid "List[:class:`Component`]"
msgstr ""

#: ../../interactions/api.rst:56 ../../interactions/api.rst:379
msgid "Button"
msgstr ""

#: discord.components.Button:1 of
msgid "Represents a button from the Discord Bot UI Kit."
msgstr ""

#: discord.components.Button:7 of
msgid ""
"The user constructible and usable type to create a button is "
":class:`discord.ui.Button` not this one."
msgstr ""

#: discord.components.Button:14 discord.ui.Button.style:1
#: discord.ui.button.Button:5 of
msgid "The style of the button."
msgstr ""

#: discord.components.Button:16 of
msgid ":class:`.ButtonStyle`"
msgstr ""

#: discord.components.Button:20 discord.ui.button.Button:7 of
msgid ""
"The ID of the button that gets received during an interaction. If this "
"button is for a URL, it does not have a custom ID."
msgstr ""

#: discord.TextInput.default:5 discord.components.Button:23
#: discord.components.Button:29 discord.components.Button:41
#: discord.components.SelectMenu:17 discord.components.SelectMenu:23
#: discord.components.SelectOption:27 discord.components.TextInput:13
#: discord.components.TextInput:31 discord.components.TextInput:37
#: discord.ui.Button.custom_id:5 discord.ui.Button.label:3
#: discord.ui.Button.url:3 discord.ui.Select.placeholder:3
#: discord.ui.TextInput.value:3 of
msgid "Optional[:class:`str`]"
msgstr ""

#: discord.components.Button:27 discord.ui.Button.url:1
#: discord.ui.button.Button:10 of
msgid "The URL this button sends you to."
msgstr ""

#: discord.components.Button:33 discord.ui.Button.disabled:1
#: discord.ui.button.Button:12 of
msgid "Whether the button is disabled or not."
msgstr ""

#: discord.app_commands.models.AppCommandGroup:27
#: discord.app_commands.models.AppCommandThread:64
#: discord.app_commands.models.AppCommandThread:70
#: discord.app_commands.models.AppCommandThread:77
#: discord.app_commands.models.Argument:27
#: discord.app_commands.namespace.Namespace:28 discord.components.Button:35
#: discord.components.SelectMenu:49 discord.components.SelectOption:39
#: discord.components.TextInput:43 discord.ui.Button.disabled:3
#: discord.ui.Select.disabled:3 discord.ui.TextInput.required:3
#: discord.ui.view.View.interaction_check:20 discord.ui.view.View.wait:8 of
msgid ":class:`bool`"
msgstr ""

#: discord.components.Button:39 discord.ui.button.Button:14
#: discord.ui.button.button:15 of
msgid "The label of the button, if any."
msgstr ""

#: discord.components.Button:45 discord.ui.Button.emoji:1
#: discord.ui.button.Button:16 of
msgid "The emoji of the button, if available."
msgstr ""

#: discord.components.Button:47 of
msgid "Optional[:class:`PartialEmoji`]"
msgstr ""

#: ../../interactions/api.rst:65
msgid "SelectMenu"
msgstr ""

#: discord.components.SelectMenu:1 of
msgid "Represents a select menu from the Discord Bot UI Kit."
msgstr ""

#: discord.components.SelectMenu:3 of
msgid ""
"A select menu is functionally the same as a dropdown, however on mobile "
"it renders a bit differently."
msgstr ""

#: discord.components.SelectMenu:8 of
msgid ""
"The user constructible and usable type to create a select menu is "
":class:`discord.ui.Select` not this one."
msgstr ""

#: discord.components.SelectMenu:15 discord.ui.Select.custom_id:1
#: discord.ui.TextInput.custom_id:1 of
msgid "The ID of the select menu that gets received during an interaction."
msgstr ""

#: discord.components.SelectMenu:21 discord.ui.Select.placeholder:1
#: discord.ui.select.Select:12 discord.ui.select.select:10 of
msgid "The placeholder text that is shown if nothing is selected, if any."
msgstr ""

#: discord.components.SelectMenu:27 discord.ui.select.Select:14
#: discord.ui.select.select:21 of
msgid ""
"The minimum number of items that must be chosen for this select menu. "
"Defaults to 1 and must be between 1 and 25."
msgstr ""

#: discord.components.SelectMenu:34 discord.ui.select.Select:17
#: discord.ui.select.select:24 of
msgid ""
"The maximum number of items that must be chosen for this select menu. "
"Defaults to 1 and must be between 1 and 25."
msgstr ""

#: discord.components.SelectMenu:41 discord.ui.Select.options:1
#: discord.ui.select.Select:20 discord.ui.select.select:27 of
msgid "A list of options that can be selected in this menu."
msgstr ""

#: discord.components.SelectMenu:43 of
msgid "List[:class:`SelectOption`]"
msgstr ""

#: discord.components.SelectMenu:47 discord.ui.Select.disabled:1
#: discord.ui.select.Select:22 of
msgid "Whether the select is disabled or not."
msgstr ""

#: ../../interactions/api.rst:75 ../../interactions/api.rst:401
msgid "TextInput"
msgstr ""

#: discord.components.TextInput:1 of
msgid "Represents a text input from the Discord Bot UI Kit."
msgstr ""

#: discord.components.TextInput:4 of
msgid ""
"The user constructible and usable type to create a text input is "
":class:`discord.ui.TextInput` not this one."
msgstr ""

#: discord.components.TextInput:11 of
msgid "The ID of the text input that gets received during an interaction."
msgstr ""

#: discord.components.TextInput:17 discord.ui.text_input.TextInput:5 of
msgid "The label to display above the text input."
msgstr ""

#: discord.components.TextInput:23 discord.ui.TextInput.style:1
#: discord.ui.text_input.TextInput:10 of
msgid "The style of the text input."
msgstr ""

#: discord.components.TextInput:25 of
msgid ":class:`TextStyle`"
msgstr ""

#: discord.components.TextInput:29 discord.ui.TextInput.placeholder:1
#: discord.ui.text_input.TextInput:12 of
msgid "The placeholder text to display when the text input is empty."
msgstr ""

#: discord.TextInput.default:1 discord.components.TextInput:35
#: discord.ui.TextInput.default:1 discord.ui.text_input.TextInput:14 of
msgid "The default value of the text input."
msgstr ""

#: discord.components.TextInput:41 discord.ui.TextInput.required:1
#: discord.ui.text_input.TextInput:16 of
msgid "Whether the text input is required."
msgstr ""

#: discord.components.TextInput:47 discord.ui.TextInput.min_length:1
#: discord.ui.text_input.TextInput:18 of
msgid "The minimum length of the text input."
msgstr ""

#: discord.components.TextInput:53 discord.ui.TextInput.max_length:1
#: discord.ui.text_input.TextInput:20 of
msgid "The maximum length of the text input."
msgstr ""

#: discord.TextInput.default:3 of
msgid "This is an alias to :attr:`value`."
msgstr ""

#: ../../interactions/api.rst:84
msgid "AppCommand"
msgstr ""

#: discord.app_commands.models.AppCommand:1 of
msgid "Represents a application command."
msgstr ""

#: discord.app_commands.models.AppCommand:3 of
msgid ""
"In common parlance this is referred to as a \"Slash Command\" or a "
"\"Context Menu Command\"."
msgstr ""

#: discord.app_commands.models.AppCommand:12 of
msgid "Checks if two application commands are equal."
msgstr ""

#: discord.app_commands.models.AppCommand:16 of
msgid "Checks if two application commands are not equal."
msgstr ""

#: discord.app_commands.models.AppCommand:20 of
msgid "Returns the application command's hash."
msgstr ""

#: discord.app_commands.models.AppCommand:24 of
msgid "Returns the application command's name."
msgstr ""

#: discord.app_commands.models.AppCommand:28 of
msgid "The application command's ID."
msgstr ""

#: discord.app_commands.models.AppCommand:34 of
msgid "The application command's application's ID."
msgstr ""

#: discord.app_commands.models.AppCommand:40 of
msgid "The application command's type."
msgstr ""

#: discord.app_commands.errors.CommandNotFound:24
#: discord.app_commands.models.AppCommand:42 of
msgid ":class:`~discord.AppCommandType`"
msgstr ""

#: discord.app_commands.models.AppCommand:46 of
msgid "The application command's name."
msgstr ""

#: discord.app_commands.models.AppCommand:52 of
msgid "The application command's description."
msgstr ""

#: ../../interactions/api.rst:92
msgid "AppCommandGroup"
msgstr ""

#: discord.app_commands.models.AppCommandGroup:1 of
msgid "Represents a application command subcommand."
msgstr ""

#: discord.app_commands.models.AppCommandGroup:7 of
msgid "The type of subcommand."
msgstr ""

#: discord.app_commands.errors.TransformerError:23
#: discord.app_commands.models.AppCommandGroup:9
#: discord.app_commands.models.Argument:9 of
msgid ":class:`~discord.AppCommandOptionType`"
msgstr ""

#: discord.app_commands.models.AppCommandGroup:13 of
msgid "The name of the subcommand."
msgstr ""

#: discord.app_commands.models.AppCommandGroup:19 of
msgid "The description of the subcommand."
msgstr ""

#: discord.app_commands.models.AppCommandGroup:25 of
msgid "Whether the subcommand is required."
msgstr ""

#: discord.app_commands.models.AppCommandGroup:31 of
msgid "A list of choices for the command to choose from for this subcommand."
msgstr ""

#: discord.app_commands.models.AppCommandGroup:33
#: discord.app_commands.models.Argument:33 of
msgid "List[:class:`Choice`]"
msgstr ""

#: discord.app_commands.models.AppCommandGroup:37 of
msgid "A list of arguments."
msgstr ""

#: discord.app_commands.models.AppCommandGroup:39 of
msgid "List[:class:`Argument`]"
msgstr ""

#: discord.app_commands.models.AppCommandGroup:43 of
msgid "The parent application command."
msgstr ""

#: discord.app_commands.models.AppCommandGroup:45
#: discord.app_commands.models.Argument:39 of
msgid "Union[:class:`AppCommand`, :class:`AppCommandGroup`]"
msgstr ""

#: ../../interactions/api.rst:100
msgid "AppCommandChannel"
msgstr ""

#: discord.app_commands.models.AppCommandChannel:1 of
msgid "Represents an application command partially resolved channel object."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:9 of
msgid "Checks if two channels are equal."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:13 of
msgid "Checks if two channels are not equal."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:17 of
msgid "Returns the channel's hash."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:21 of
msgid "Returns the channel's name."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:25 of
msgid "The ID of the channel."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:31 of
msgid "The type of channel."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:33
#: discord.app_commands.models.AppCommandThread:33 of
msgid ":class:`~discord.ChannelType`"
msgstr ""

#: discord.app_commands.models.AppCommandChannel:37 of
msgid "The name of the channel."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:43 of
msgid ""
"The resolved permissions of the user who invoked the application command "
"in that channel."
msgstr ""

#: discord.app_commands.models.AppCommandChannel:46
#: discord.app_commands.models.AppCommandThread:52 of
msgid ":class:`~discord.Permissions`"
msgstr ""

#: discord.app_commands.models.AppCommandChannel:50 of
msgid "The guild ID this channel belongs to."
msgstr ""

#: discord.app_commands.AppCommandChannel.guild:1
#: discord.app_commands.AppCommandThread.guild:1 of
msgid "The channel's guild, from cache, if found."
msgstr ""

#: discord.app_commands.AppCommandChannel.guild:3
#: discord.app_commands.AppCommandThread.guild:3 of
msgid "Optional[:class:`~discord.Guild`]"
msgstr ""

#: discord.app_commands.models.AppCommandChannel.resolve:1
#: discord.app_commands.models.AppCommandThread.resolve:1 of
msgid ""
"Resolves the application command channel to the appropriate channel from "
"cache if found."
msgstr ""

#: discord.app_commands.models.AppCommandChannel.resolve:4
#: discord.app_commands.models.AppCommandThread.resolve:4 of
msgid "The resolved guild channel or ``None`` if not found in cache."
msgstr ""

#: discord.app_commands.models.AppCommandChannel.resolve:5
#: discord.app_commands.models.AppCommandThread.resolve:5 of
msgid "Optional[:class:`.abc.GuildChannel`]"
msgstr ""

#: discord.app_commands.models.AppCommandChannel.fetch:3 of
msgid "Fetches the partial channel to a full :class:`.abc.GuildChannel`."
msgstr ""

#: discord.app_commands.models.AppCommandChannel.fetch:5 of
msgid "The channel was not found."
msgstr ""

#: discord.app_commands.models.AppCommandChannel.fetch:6 of
msgid "You do not have the permissions required to get a channel."
msgstr ""

#: discord.app_commands.models.AppCommandChannel.fetch:7 of
msgid "Retrieving the channel failed."
msgstr ""

#: discord.app_commands.models.AppCommandChannel.fetch:9 of
msgid "The full channel."
msgstr ""

#: discord.app_commands.models.AppCommandChannel.fetch:10 of
msgid ":class:`.abc.GuildChannel`"
msgstr ""

#: discord.app_commands.AppCommandChannel.mention:1 of
msgid "The string that allows you to mention the channel."
msgstr ""

#: discord.app_commands.AppCommandChannel.created_at:1 of
msgid "An aware timestamp of when this channel was created in UTC."
msgstr ""

#: discord.app_commands.AppCommandChannel.created_at:3
#: discord.app_commands.models.AppCommandThread:96 of
msgid ":class:`datetime.datetime`"
msgstr ""

#: ../../interactions/api.rst:108
msgid "AppCommandThread"
msgstr ""

#: discord.app_commands.models.AppCommandThread:1 of
msgid "Represents an application command partially resolved thread object."
msgstr ""

#: discord.app_commands.models.AppCommandThread:9 of
msgid "Checks if two thread are equal."
msgstr ""

#: discord.app_commands.models.AppCommandThread:13 of
msgid "Checks if two thread are not equal."
msgstr ""

#: discord.app_commands.models.AppCommandThread:17 of
msgid "Returns the thread's hash."
msgstr ""

#: discord.app_commands.models.AppCommandThread:21 of
msgid "Returns the thread's name."
msgstr ""

#: discord.app_commands.models.AppCommandThread:25 of
msgid "The ID of the thread."
msgstr ""

#: discord.app_commands.models.AppCommandThread:31 of
msgid "The type of thread."
msgstr ""

#: discord.app_commands.models.AppCommandThread:37 of
msgid "The name of the thread."
msgstr ""

#: discord.app_commands.models.AppCommandThread:43 of
msgid "The parent text channel ID this thread belongs to."
msgstr ""

#: discord.app_commands.models.AppCommandThread:49 of
msgid ""
"The resolved permissions of the user who invoked the application command "
"in that thread."
msgstr ""

#: discord.app_commands.models.AppCommandThread:56 of
msgid "The guild ID this thread belongs to."
msgstr ""

#: discord.app_commands.models.AppCommandThread:62 of
msgid "Whether the thread is archived."
msgstr ""

#: discord.app_commands.models.AppCommandThread:68 of
msgid "Whether the thread is locked."
msgstr ""

#: discord.app_commands.models.AppCommandThread:74 of
msgid ""
"Whether non-moderators can add other non-moderators to this thread. This "
"is always ``True`` for public threads."
msgstr ""

#: discord.app_commands.models.AppCommandThread:81 of
msgid "The user's ID that archived this thread."
msgstr ""

#: discord.app_commands.models.AppCommandThread:87 of
msgid ""
"The duration in minutes until the thread is automatically archived due to"
" inactivity. Usually a value of 60, 1440, 4320 and 10080."
msgstr ""

#: discord.app_commands.models.AppCommandThread:94 of
msgid ""
"An aware timestamp of when the thread's archived status was last updated "
"in UTC."
msgstr ""

#: discord.app_commands.AppCommandThread.parent:1 of
msgid "The parent channel this thread belongs to."
msgstr ""

#: discord.app_commands.AppCommandThread.parent:3 of
msgid "Optional[:class:`~discord.TextChannel`]"
msgstr ""

#: discord.app_commands.AppCommandThread.mention:1 of
msgid "The string that allows you to mention the thread."
msgstr ""

#: discord.app_commands.AppCommandThread.created_at:1 of
msgid "An aware timestamp of when the thread was created in UTC."
msgstr ""

#: discord.app_commands.AppCommandThread.created_at:5 of
msgid ""
"This timestamp only exists for threads created after 9 January 2022, "
"otherwise returns ``None``."
msgstr ""

#: discord.app_commands.models.AppCommandThread.fetch:3 of
msgid "Fetches the partial channel to a full :class:`~discord.Thread`."
msgstr ""

#: discord.app_commands.models.AppCommandThread.fetch:5 of
msgid "The thread was not found."
msgstr ""

#: discord.app_commands.models.AppCommandThread.fetch:6 of
msgid "You do not have the permissions required to get a thread."
msgstr ""

#: discord.app_commands.models.AppCommandThread.fetch:7 of
msgid "Retrieving the thread failed."
msgstr ""

#: discord.app_commands.models.AppCommandThread.fetch:9 of
msgid "The full thread."
msgstr ""

#: discord.app_commands.models.AppCommandThread.fetch:10 of
msgid ":class:`~discord.Thread`"
msgstr ""

#: ../../interactions/api.rst:116
msgid "Argument"
msgstr ""

#: discord.app_commands.models.Argument:1 of
msgid "Represents a application command argument."
msgstr ""

#: discord.app_commands.models.Argument:7 of
msgid "The type of argument."
msgstr ""

#: discord.app_commands.models.Argument:13 of
msgid "The name of the argument."
msgstr ""

#: discord.app_commands.models.Argument:19 of
msgid "The description of the argument."
msgstr ""

#: discord.app_commands.models.Argument:25 of
msgid "Whether the argument is required."
msgstr ""

#: discord.app_commands.models.Argument:31 of
msgid "A list of choices for the command to choose from for this argument."
msgstr ""

#: discord.app_commands.models.Argument:37 of
msgid "The parent application command that has this argument."
msgstr ""

#: ../../interactions/api.rst:124
msgid "Data Classes"
msgstr ""

#: ../../interactions/api.rst:126
msgid ""
"Similar to :ref:`discord_api_data`, these can be received and constructed"
" by users."
msgstr ""

#: ../../interactions/api.rst:129
msgid "SelectOption"
msgstr ""

#: discord.components.SelectOption:1 of
msgid "Represents a select menu's option."
msgstr ""

#: discord.components.SelectOption:3 of
msgid "These can be created by users."
msgstr ""

#: discord.components.SelectOption:9 discord.ui.select.Select.add_option:6 of
msgid ""
"The label of the option. This is displayed to users. Can only be up to "
"100 characters."
msgstr ""

#: discord.components.SelectOption:16 of
msgid ""
"The value of the option. This is not displayed to users. If not provided "
"when constructed then it defaults to the label. Can only be up to 100 "
"characters."
msgstr ""

#: discord.components.SelectOption:24 discord.ui.select.Select.add_option:12 of
msgid ""
"An additional description of the option, if any. Can only be up to 100 "
"characters."
msgstr ""

#: discord.components.SelectOption:31 of
msgid "The emoji of the option, if available."
msgstr ""

#: discord.components.SelectOption:33 of
msgid "Optional[Union[:class:`str`, :class:`Emoji`, :class:`PartialEmoji`]]"
msgstr ""

#: discord.components.SelectOption:37 discord.ui.select.Select.add_option:18 of
msgid "Whether this option is selected by default."
msgstr ""

#: ../../interactions/api.rst:137
msgid "Choice"
msgstr ""

#: discord.app_commands.models.Choice:1 of
msgid "Represents an application command argument choice."
msgstr ""

#: discord.app_commands.models.Choice:9 of
msgid "Checks if two choices are equal."
msgstr ""

#: discord.app_commands.models.Choice:13 of
msgid "Checks if two choices are not equal."
msgstr ""

#: discord.app_commands.models.Choice:17 of
msgid "Returns the choice's hash."
msgstr ""

#: discord.app_commands.models.Choice:19 of
msgid "The name of the choice. Used for display purposes."
msgstr ""

#: discord.app_commands.models.Choice:21 of
msgid "The value of the choice."
msgstr ""

#: ../../interactions/api.rst:146
msgid "Enumerations"
msgstr ""

#: ../../interactions/api.rst:150
msgid "Specifies the type of :class:`Interaction`."
msgstr ""

#: ../../interactions/api.rst:156
msgid ""
"Represents Discord pinging to see if the interaction response server is "
"alive."
msgstr ""

#: ../../interactions/api.rst:159
msgid "Represents a slash command interaction."
msgstr ""

#: ../../interactions/api.rst:162
msgid ""
"Represents a component based interaction, i.e. using the Discord Bot UI "
"Kit."
msgstr ""

#: ../../interactions/api.rst:165
msgid "Represents an auto complete interaction."
msgstr ""

#: ../../interactions/api.rst:168
msgid "Represents submission of a modal interaction."
msgstr ""

#: ../../interactions/api.rst:172
msgid "Specifies the response type for the interaction."
msgstr ""

#: ../../interactions/api.rst:178
msgid "Pongs the interaction when given a ping."
msgstr ""

#: ../../interactions/api.rst:180
msgid "See also :meth:`InteractionResponse.pong`"
msgstr ""

#: ../../interactions/api.rst:183
msgid "Respond to the interaction with a message."
msgstr ""

#: ../../interactions/api.rst:185
msgid "See also :meth:`InteractionResponse.send_message`"
msgstr ""

#: ../../interactions/api.rst:188
msgid "Responds to the interaction with a message at a later time."
msgstr ""

#: ../../interactions/api.rst:190 ../../interactions/api.rst:196
msgid "See also :meth:`InteractionResponse.defer`"
msgstr ""

#: ../../interactions/api.rst:193
msgid ""
"Acknowledges the component interaction with a promise that the message "
"will update later (though there is no need to actually update the "
"message)."
msgstr ""

#: ../../interactions/api.rst:199
msgid "Responds to the interaction by editing the message."
msgstr ""

#: ../../interactions/api.rst:201
msgid "See also :meth:`InteractionResponse.edit_message`"
msgstr ""

#: ../../interactions/api.rst:204
msgid "Responds to the autocomplete interaction with suggested choices."
msgstr ""

#: ../../interactions/api.rst:206
msgid "See also :meth:`InteractionResponse.autocomplete`"
msgstr ""

#: ../../interactions/api.rst:209
msgid "Responds to the interaction with a modal."
msgstr ""

#: ../../interactions/api.rst:211
msgid "See also :meth:`InteractionResponse.send_modal`"
msgstr ""

#: ../../interactions/api.rst:215
msgid "Represents the component type of a component."
msgstr ""

#: ../../interactions/api.rst:221
msgid "Represents the group component which holds different components in a row."
msgstr ""

#: ../../interactions/api.rst:224
msgid "Represents a button component."
msgstr ""

#: ../../interactions/api.rst:227
msgid "Represents a select component."
msgstr ""

#: ../../interactions/api.rst:231
msgid "Represents a text box component."
msgstr ""

#: ../../interactions/api.rst:235
msgid "Represents the style of the button component."
msgstr ""

#: ../../interactions/api.rst:241
msgid "Represents a blurple button for the primary action."
msgstr ""

#: ../../interactions/api.rst:244
msgid "Represents a grey button for the secondary action."
msgstr ""

#: ../../interactions/api.rst:247
msgid "Represents a green button for a successful action."
msgstr ""

#: ../../interactions/api.rst:250
msgid "Represents a red button for a dangerous action."
msgstr ""

#: ../../interactions/api.rst:253
msgid "Represents a link button."
msgstr ""

#: ../../interactions/api.rst:257
msgid "An alias for :attr:`primary`."
msgstr ""

#: ../../interactions/api.rst:260 ../../interactions/api.rst:263
msgid "An alias for :attr:`secondary`."
msgstr ""

#: ../../interactions/api.rst:266
msgid "An alias for :attr:`success`."
msgstr ""

#: ../../interactions/api.rst:269
msgid "An alias for :attr:`danger`."
msgstr ""

#: ../../interactions/api.rst:272
msgid "An alias for :attr:`link`."
msgstr ""

#: ../../interactions/api.rst:276
msgid "Represents the style of the text box component."
msgstr ""

#: ../../interactions/api.rst:282
msgid "Represents a short text box."
msgstr ""

#: ../../interactions/api.rst:285
msgid "Represents a long form text box."
msgstr ""

#: ../../interactions/api.rst:288
msgid "An alias for :attr:`paragraph`."
msgstr ""

#: ../../interactions/api.rst:292
msgid ""
"The application command's option type. This is usually the type of "
"parameter an application command takes."
msgstr ""

#: ../../interactions/api.rst:298
msgid "A subcommand."
msgstr ""

#: ../../interactions/api.rst:301
msgid "A subcommand group."
msgstr ""

#: ../../interactions/api.rst:304
msgid "A string parameter."
msgstr ""

#: ../../interactions/api.rst:307
msgid "A integer parameter."
msgstr ""

#: ../../interactions/api.rst:310
msgid "A boolean parameter."
msgstr ""

#: ../../interactions/api.rst:313
msgid "A user parameter."
msgstr ""

#: ../../interactions/api.rst:316
msgid "A channel parameter."
msgstr ""

#: ../../interactions/api.rst:319
msgid "A role parameter."
msgstr ""

#: ../../interactions/api.rst:322
msgid "A mentionable parameter."
msgstr ""

#: ../../interactions/api.rst:325
msgid "A number parameter."
msgstr ""

#: ../../interactions/api.rst:328
msgid "An attachment parameter."
msgstr ""

#: ../../interactions/api.rst:332
msgid "The type of application command."
msgstr ""

#: ../../interactions/api.rst:338
msgid "A slash command."
msgstr ""

#: ../../interactions/api.rst:341
msgid "A user context menu command."
msgstr ""

#: ../../interactions/api.rst:344
msgid "A message context menu command."
msgstr ""

#: ../../interactions/api.rst:349
msgid "Bot UI Kit"
msgstr ""

#: ../../interactions/api.rst:351
msgid ""
"The library has helpers to aid create component-based UIs. These are all "
"in the ``discord.ui`` package."
msgstr ""

#: ../../interactions/api.rst:355
msgid "View"
msgstr ""

#: discord.ui.view.View:1 of
msgid "Represents a UI view."
msgstr ""

#: discord.ui.view.View:3 of
msgid "This object must be inherited to create a UI within Discord."
msgstr ""

#: discord.ui.modal.Modal:9 discord.ui.view.View:7 of
msgid ""
"Timeout in seconds from last interaction with the UI before no longer "
"accepting input. If ``None`` then there is no timeout."
msgstr ""

#: discord.ui.modal.Modal:18 discord.ui.view.View:13 of
msgid ""
"Timeout from last interaction with the UI before no longer accepting "
"input. If ``None`` then there is no timeout."
msgstr ""

#: discord.ui.modal.Modal:21 discord.ui.view.View:16 of
msgid "Optional[:class:`float`]"
msgstr ""

#: discord.ui.modal.Modal:31 discord.ui.view.View:20 of
msgid "The list of children attached to this view."
msgstr ""

#: discord.ui.modal.Modal:33 discord.ui.view.View:22 of
msgid "List[:class:`Item`]"
msgstr ""

#: discord.ui.view.View.from_message:1 of
msgid "Converts a message's components into a :class:`View`."
msgstr ""

#: discord.ui.view.View.from_message:3 of
msgid ""
"The :attr:`.Message.components` of a message are read-only and separate "
"types from those in the ``discord.ui`` namespace. In order to modify and "
"edit message components they must be converted into a :class:`View` "
"first."
msgstr ""

#: discord.ui.view.View.from_message:8 of
msgid "The message with components to convert into a view."
msgstr ""

#: discord.ui.view.View.from_message:10 of
msgid "The timeout of the converted view."
msgstr ""

#: discord.ui.view.View.from_message:13 of
msgid ""
"The converted view. This always returns a :class:`View` and not one of "
"its subclasses."
msgstr ""

#: discord.ui.view.View.from_message:15 of
msgid ":class:`View`"
msgstr ""

#: discord.ui.view.View.add_item:1 of
msgid "Adds an item to the view."
msgstr ""

#: discord.ui.view.View.add_item:3 of
msgid "The item to add to the view."
msgstr ""

#: discord.ui.view.View.add_item:6 of
msgid "An :class:`Item` was not passed."
msgstr ""

#: discord.ui.view.View.add_item:7 of
msgid ""
"Maximum number of children has been exceeded (25)     or the row the item"
" is trying to be added to is full."
msgstr ""

#: discord.ui.view.View.remove_item:1 of
msgid "Removes an item from the view."
msgstr ""

#: discord.ui.view.View.remove_item:3 of
msgid "The item to remove from the view."
msgstr ""

#: discord.ui.view.View.clear_items:1 of
msgid "Removes all items from the view."
msgstr ""

#: discord.ui.view.View.interaction_check:3 of
msgid ""
"A callback that is called when an interaction happens within the view "
"that checks whether the view should process item callbacks for the "
"interaction."
msgstr ""

#: discord.ui.view.View.interaction_check:6 of
msgid ""
"This is useful to override if, for example, you want to ensure that the "
"interaction author is a given user."
msgstr ""

#: discord.ui.view.View.interaction_check:9 of
msgid "The default implementation of this returns ``True``."
msgstr ""

#: discord.ui.view.View.interaction_check:13 of
msgid ""
"If an exception occurs within the body then the check is considered a "
"failure and :meth:`on_error` is called."
msgstr ""

#: discord.ui.view.View.interaction_check:16 of
msgid "The interaction that occurred."
msgstr ""

#: discord.ui.view.View.interaction_check:19 of
msgid "Whether the view children's callbacks should be called."
msgstr ""

#: discord.ui.view.View.on_timeout:3 of
msgid ""
"A callback that is called when a view's timeout elapses without being "
"explicitly stopped."
msgstr ""

#: discord.ui.view.View.on_error:3 of
msgid ""
"A callback that is called when an item's callback or "
":meth:`interaction_check` fails with an error."
msgstr ""

#: discord.app_commands.tree.CommandTree.on_error:5
#: discord.ui.modal.Modal.on_error:6 discord.ui.view.View.on_error:6 of
msgid "The default implementation prints the traceback to stderr."
msgstr ""

#: discord.app_commands.commands.Group.on_error:11
#: discord.app_commands.tree.CommandTree.on_error:11
#: discord.ui.modal.Modal.on_error:8 discord.ui.view.View.on_error:8 of
msgid "The exception that was raised."
msgstr ""

#: discord.ui.view.View.on_error:10 of
msgid "The item that failed the dispatch."
msgstr ""

#: discord.ui.modal.Modal.on_error:10 discord.ui.view.View.on_error:12 of
msgid "The interaction that led to the failure."
msgstr ""

#: discord.ui.view.View.stop:1 of
msgid "Stops listening to interaction events from this view."
msgstr ""

#: discord.ui.view.View.stop:3 of
msgid "This operation cannot be undone."
msgstr ""

#: discord.ui.view.View.is_finished:1 of
msgid ":class:`bool`: Whether the view has finished interacting."
msgstr ""

#: discord.ui.view.View.is_dispatching:1 of
msgid ":class:`bool`: Whether the view has been added for dispatching purposes."
msgstr ""

#: discord.ui.view.View.is_persistent:1 of
msgid ":class:`bool`: Whether the view is set up as persistent."
msgstr ""

#: discord.ui.view.View.is_persistent:3 of
msgid ""
"A persistent view has all their components with a set ``custom_id`` and a"
" :attr:`timeout` set to ``None``."
msgstr ""

#: discord.ui.view.View.wait:1 of
msgid "Waits until the view has finished interacting."
msgstr ""

#: discord.ui.view.View.wait:3 of
msgid "A view is considered finished when :meth:`stop` is called or it times out."
msgstr ""

#: discord.ui.view.View.wait:6 of
msgid ""
"If ``True``, then the view timed out. If ``False`` then the view finished"
" normally."
msgstr ""

#: ../../interactions/api.rst:363
msgid "Modal"
msgstr ""

#: discord.ui.modal.Modal:1 of
msgid "Represents a UI modal."
msgstr ""

#: discord.ui.modal.Modal:3 of
msgid ""
"This object must be inherited to create a modal popup window within "
"discord."
msgstr ""

#: discord.ui.modal.Modal:7 discord.ui.modal.Modal:25 of
msgid "The title of the modal."
msgstr ""

#: discord.ui.modal.Modal:12 of
msgid ""
"The ID of the modal that gets received during an interaction. If not "
"given then one is generated for you."
msgstr ""

#: discord.ui.modal.Modal:37 of
msgid "The ID of the modal that gets received during an interaction."
msgstr ""

#: discord.ui.modal.Modal.on_submit:3 of
msgid "Called when the modal is submitted."
msgstr ""

#: discord.ui.modal.Modal.on_submit:5 of
msgid "The interaction that submitted this modal."
msgstr ""

#: discord.ui.modal.Modal.on_error:3 of
msgid "A callback that is called when :meth:`on_submit` fails with an error."
msgstr ""

#: ../../interactions/api.rst:371
msgid "Item"
msgstr ""

#: discord.ui.item.Item:1 of
msgid "Represents the base UI item that all UI components inherit from."
msgstr ""

#: discord.ui.item.Item:3 of
msgid "The current UI items supported are:"
msgstr ""

#: discord.ui.item.Item:5 of
msgid ":class:`discord.ui.Button`"
msgstr ""

#: discord.ui.item.Item:6 of
msgid ":class:`discord.ui.Select`"
msgstr ""

#: discord.ui.Button.view:1 discord.ui.Item.view:1 discord.ui.Select.view:1
#: discord.ui.TextInput.view:1 of
msgid "The underlying view for this item."
msgstr ""

#: discord.ui.Button.view:3 discord.ui.Item.view:3 discord.ui.Select.view:3
#: discord.ui.TextInput.view:3 of
msgid "Optional[:class:`View`]"
msgstr ""

#: discord.ui.item.Item.callback:3 of
msgid "The callback associated with this UI item."
msgstr ""

#: discord.ui.item.Item.callback:5 of
msgid "This can be overriden by subclasses."
msgstr ""

#: discord.ui.item.Item.callback:7 of
msgid "The interaction that triggered this UI item."
msgstr ""

#: discord.ui.button.Button:1 of
msgid "Represents a UI button."
msgstr ""

#: discord.ui.button.Button:18 discord.ui.button.button:27 of
msgid ""
"The relative row this button belongs to. A Discord component can only "
"have 5 rows. By default, items are arranged automatically into those 5 "
"rows. If you'd like to control the relative positioning of the row then "
"passing an index is advised. For example, row=1 will show up before "
"row=2. Defaults to ``None``, which is automatic ordering. The row number "
"must be between 0 and 4 (i.e. zero indexed)."
msgstr ""

#: discord.ui.Button.style:3 of
msgid ":class:`discord.ButtonStyle`"
msgstr ""

#: discord.ui.Button.custom_id:1 of
msgid "The ID of the button that gets received during an interaction."
msgstr ""

#: discord.ui.Button.custom_id:3 of
msgid "If this button is for a URL, it does not have a custom ID."
msgstr ""

#: discord.ui.Button.label:1 of
msgid "The label of the button, if available."
msgstr ""

#: discord.ui.Button.emoji:3 of
msgid "Optional[:class:`.PartialEmoji`]"
msgstr ""

#: discord.ui.button.button:1 of
msgid "A decorator that attaches a button to a component."
msgstr ""

#: discord.ui.button.button:3 of
msgid ""
"The function being decorated should have three parameters, ``self`` "
"representing the :class:`discord.ui.View`, the :class:`discord.ui.Button`"
" being pressed and the :class:`discord.Interaction` you receive."
msgstr ""

#: discord.ui.button.button:9 of
msgid ""
"Buttons with a URL cannot be created with this function. Consider "
"creating a :class:`Button` manually instead. This is because buttons with"
" a URL do not have a callback associated with them since Discord does not"
" do any processing with it."
msgstr ""

#: discord.ui.button.button:17 of
msgid ""
"The ID of the button that gets received during an interaction. It is "
"recommended not to set this parameter to prevent conflicts."
msgstr ""

#: discord.ui.button.button:20 of
msgid "The style of the button. Defaults to :attr:`.ButtonStyle.grey`."
msgstr ""

#: discord.ui.button.button:22 of
msgid "Whether the button is disabled or not. Defaults to ``False``."
msgstr ""

#: discord.ui.button.button:24 of
msgid ""
"The emoji of the button. This can be in string form or a "
":class:`.PartialEmoji` or a full :class:`.Emoji`."
msgstr ""

#: ../../interactions/api.rst:390
msgid "Select"
msgstr ""

#: discord.ui.select.Select:1 of
msgid "Represents a UI select menu."
msgstr ""

#: discord.ui.select.Select:3 of
msgid "This is usually represented as a drop down menu."
msgstr ""

#: discord.ui.select.Select:5 of
msgid ""
"In order to get the selected items that the user has chosen, use "
":attr:`Select.values`."
msgstr ""

#: discord.ui.select.Select:9 of
msgid ""
"The ID of the select menu that gets received during an interaction. If "
"not given then one is generated for you."
msgstr ""

#: discord.ui.select.Select:24 discord.ui.select.select:15 of
msgid ""
"The relative row this select menu belongs to. A Discord component can "
"only have 5 rows. By default, items are arranged automatically into those"
" 5 rows. If you'd like to control the relative positioning of the row "
"then passing an index is advised. For example, row=1 will show up before "
"row=2. Defaults to ``None``, which is automatic ordering. The row number "
"must be between 0 and 4 (i.e. zero indexed)."
msgstr ""

#: discord.ui.Select.min_values:1 of
msgid "The minimum number of items that must be chosen for this select menu."
msgstr ""

#: discord.ui.Select.max_values:1 of
msgid "The maximum number of items that must be chosen for this select menu."
msgstr ""

#: discord.ui.Select.options:3 of
msgid "List[:class:`discord.SelectOption`]"
msgstr ""

#: discord.ui.select.Select.add_option:1 of
msgid "Adds an option to the select menu."
msgstr ""

#: discord.ui.select.Select.add_option:3 of
msgid ""
"To append a pre-existing :class:`discord.SelectOption` use the "
":meth:`append_option` method instead."
msgstr ""

#: discord.ui.select.Select.add_option:9 of
msgid ""
"The value of the option. This is not displayed to users. If not given, "
"defaults to the label. Can only be up to 100 characters."
msgstr ""

#: discord.ui.select.Select.add_option:15 of
msgid ""
"The emoji of the option, if available. This can either be a string "
"representing the custom or unicode emoji or an instance of "
":class:`.PartialEmoji` or :class:`.Emoji`."
msgstr ""

#: discord.ui.select.Select.add_option:21
#: discord.ui.select.Select.append_option:6 of
msgid "The number of options exceeds 25."
msgstr ""

#: discord.ui.select.Select.append_option:1 of
msgid "Appends an option to the select menu."
msgstr ""

#: discord.ui.select.Select.append_option:3 of
msgid "The option to append to the select menu."
msgstr ""

#: discord.ui.Select.values:1 of
msgid "A list of values that have been selected by the user."
msgstr ""

#: discord.app_commands.errors.CommandNotFound:18 discord.ui.Select.values:3 of
msgid "List[:class:`str`]"
msgstr ""

#: discord.ui.select.select:1 of
msgid "A decorator that attaches a select menu to a component."
msgstr ""

#: discord.ui.select.select:3 of
msgid ""
"The function being decorated should have three parameters, ``self`` "
"representing the :class:`discord.ui.View`, the :class:`discord.ui.Select`"
" being pressed and the :class:`discord.Interaction` you receive."
msgstr ""

#: discord.ui.select.select:7 of
msgid ""
"In order to get the selected items that the user has chosen within the "
"callback use :attr:`Select.values`."
msgstr ""

#: discord.ui.select.select:12 of
msgid ""
"The ID of the select menu that gets received during an interaction. It is"
" recommended not to set this parameter to prevent conflicts."
msgstr ""

#: discord.ui.select.select:29 of
msgid "Whether the select is disabled or not. Defaults to ``False``."
msgstr ""

#: discord.ui.text_input.TextInput:1 of
msgid "Represents a UI text input."
msgstr ""

#: discord.ui.text_input.TextInput:7 of
msgid ""
"The ID of the text input that gets received during an interaction. If not"
" given then one is generated for you."
msgstr ""

#: discord.ui.text_input.TextInput:22 of
msgid ""
"The relative row this text input belongs to. A Discord component can only"
" have 5 rows. By default, items are arranged automatically into those 5 "
"rows. If you'd like to control the relative positioning of the row then "
"passing an index is advised. For example, row=1 will show up before "
"row=2. Defaults to ``None``, which is automatic ordering. The row number "
"must be between 0 and 4 (i.e. zero indexed)."
msgstr ""

#: discord.ui.TextInput.value:1 of
msgid "The value of the text input."
msgstr ""

#: discord.ui.TextInput.label:1 of
msgid "The label of the text input."
msgstr ""

#: discord.ui.TextInput.style:3 of
msgid ":class:`discord.TextStyle`"
msgstr ""

#: ../../interactions/api.rst:412
msgid "Application Commands"
msgstr ""

#: ../../interactions/api.rst:414
msgid ""
"The library has helpers to aid in creation of application commands. These"
" are all in the ``discord.app_commands`` package."
msgstr ""

#: ../../interactions/api.rst:417
msgid "CommandTree"
msgstr ""

#: discord.app_commands.tree.CommandTree:1 of
msgid "Represents a container that holds application command information."
msgstr ""

#: discord.app_commands.tree.CommandTree:3 of
msgid "The client instance to get application command information from."
msgstr ""

#: discord.app_commands.tree.CommandTree.fetch_commands:3 of
msgid "Fetches the application's current commands."
msgstr ""

#: discord.app_commands.tree.CommandTree.fetch_commands:5 of
msgid ""
"If no guild is passed then global commands are fetched, otherwise the "
"guild's commands are fetched instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.fetch_commands:10 of
msgid "This includes context menu commands."
msgstr ""

#: discord.app_commands.tree.CommandTree.fetch_commands:12 of
msgid ""
"The guild to fetch the commands from. If not passed then global commands "
"are fetched instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.fetch_commands:16 of
msgid "Fetching the commands failed."
msgstr ""

#: discord.app_commands.tree.CommandTree.fetch_commands:17 of
msgid "The application ID could not be found."
msgstr ""

#: discord.app_commands.tree.CommandTree.fetch_commands:19 of
msgid "The application's commands."
msgstr ""

#: discord.app_commands.tree.CommandTree.fetch_commands:20 of
msgid "List[:class:`~discord.app_commands.AppCommand`]"
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:1 of
msgid "Adds an application command to the tree."
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:3 of
msgid ""
"This only adds the command locally -- in order to sync the commands and "
"enable them in the client, :meth:`sync` must be called."
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:6 of
msgid "The root parent of the command is added regardless of the type passed."
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:8 of
msgid "The application command or group to add."
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:10
#: discord.app_commands.tree.CommandTree.command:10
#: discord.app_commands.tree.CommandTree.context_menu:23 of
msgid ""
"The guild to add the command to. If not given then it becomes a global "
"command instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:13 of
msgid ""
"Whether to override a command with the same name. If ``False`` an "
"exception is raised. Default is ``False``."
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:17 of
msgid "The command was already registered and no override was specified."
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:18 of
msgid "The application command passed is not a valid application command."
msgstr ""

#: discord.app_commands.tree.CommandTree.add_command:19 of
msgid ""
"The maximum number of commands was reached globally or for that guild."
"     This is currently 100 for slash commands and 5 for context menu "
"commands."
msgstr ""

#: discord.app_commands.tree.CommandTree.remove_command:1 of
msgid "Removes an application command from the tree."
msgstr ""

#: discord.app_commands.tree.CommandTree.remove_command:3 of
msgid ""
"This only removes the command locally -- in order to sync the commands "
"and remove them in the client, :meth:`sync` must be called."
msgstr ""

#: discord.app_commands.tree.CommandTree.remove_command:6 of
msgid "The name of the root command to remove."
msgstr ""

#: discord.app_commands.tree.CommandTree.remove_command:8 of
msgid ""
"The guild to remove the command from. If not given then it removes a "
"global command instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.remove_command:11 of
msgid ""
"The type of command to remove. Defaults to "
":attr:`~discord.AppCommandType.chat_input`, i.e. slash commands."
msgstr ""

#: discord.app_commands.tree.CommandTree.remove_command:15 of
msgid ""
"The application command that got removed. If nothing was removed then "
"``None`` is returned instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_command:14
#: discord.app_commands.tree.CommandTree.remove_command:17 of
msgid "Optional[Union[:class:`Command`, :class:`ContextMenu`, :class:`Group`]]"
msgstr ""

#: discord.app_commands.tree.CommandTree.get_command:1 of
msgid "Gets a application command from the tree."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_command:3 of
msgid "The name of the root command to get."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_command:5 of
msgid ""
"The guild to get the command from. If not given then it gets a global "
"command instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_command:8 of
msgid ""
"The type of command to get. Defaults to "
":attr:`~discord.AppCommandType.chat_input`, i.e. slash commands."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_command:12 of
msgid ""
"The application command that was found. If nothing was found then "
"``None`` is returned instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_commands:1 of
msgid "Gets all application commands from the tree."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_commands:3 of
msgid ""
"The guild to get the commands from. If not given then it gets all global "
"commands instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_commands:6 of
msgid ""
"The type of commands to get. Defaults to "
":attr:`~discord.AppCommandType.chat_input`, i.e. slash commands."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_commands:10 of
msgid "The application commands from the tree."
msgstr ""

#: discord.app_commands.tree.CommandTree.get_commands:11 of
msgid ""
"Union[List[:class:`ContextMenu`], List[Union[:class:`Command`, "
":class:`Group`]]"
msgstr ""

#: discord.app_commands.tree.CommandTree.on_error:3 of
msgid ""
"A callback that is called when any command raises an "
":exc:`AppCommandError`."
msgstr ""

#: discord.app_commands.commands.Group.on_error:7
#: discord.app_commands.tree.CommandTree.on_error:7 of
msgid "The interaction that is being handled."
msgstr ""

#: discord.app_commands.tree.CommandTree.on_error:9 of
msgid "The command that failed, if any."
msgstr ""

#: discord.app_commands.tree.CommandTree.command:1 of
msgid "Creates an application command directly under this tree."
msgstr ""

#: discord.app_commands.commands.Group.command:3
#: discord.app_commands.commands.command:3
#: discord.app_commands.tree.CommandTree.command:3 of
msgid ""
"The name of the application command. If not given, it defaults to a "
"lower-case version of the callback name."
msgstr ""

#: discord.app_commands.commands.Group.command:6
#: discord.app_commands.commands.command:6
#: discord.app_commands.tree.CommandTree.command:6 of
msgid ""
"The description of the application command. This shows up in the UI to "
"describe the application command. If not given, it defaults to the first "
"line of the docstring of the callback shortened to 100 characters."
msgstr ""

#: discord.app_commands.tree.CommandTree.context_menu:1 of
msgid ""
"Creates a application command context menu from a regular function "
"directly under this tree."
msgstr ""

#: discord.app_commands.commands.context_menu:3
#: discord.app_commands.tree.CommandTree.context_menu:3 of
msgid ""
"This function must have a signature of :class:`~discord.Interaction` as "
"its first parameter and taking either a :class:`~discord.Member`, "
":class:`~discord.User`, or :class:`~discord.Message`, or a "
":obj:`typing.Union` of ``Member`` and ``User`` as its second parameter."
msgstr ""

#: discord.app_commands.commands.context_menu:8
#: discord.app_commands.transformers.Range:16
#: discord.app_commands.tree.CommandTree.context_menu:8 of
msgid "Examples"
msgstr ""

#: discord.app_commands.commands.context_menu:19
#: discord.app_commands.tree.CommandTree.context_menu:19 of
msgid ""
"The name of the context menu command. If not given, it defaults to a "
"title-case version of the callback name. Note that unlike regular slash "
"commands this can have spaces and upper case characters in the name."
msgstr ""

#: discord.app_commands.tree.CommandTree.sync:3 of
msgid "Syncs the application commands to Discord."
msgstr ""

#: discord.app_commands.tree.CommandTree.sync:5 of
msgid "This must be called for the application commands to show up."
msgstr ""

#: discord.app_commands.tree.CommandTree.sync:7 of
msgid ""
"Global commands take up to 1-hour to propagate but guild commands "
"propagate instantly."
msgstr ""

#: discord.app_commands.tree.CommandTree.sync:10 of
msgid ""
"The guild to sync the commands to. If ``None`` then it syncs all global "
"commands instead."
msgstr ""

#: discord.app_commands.tree.CommandTree.sync:14 of
msgid "Syncing the commands failed."
msgstr ""

#: discord.app_commands.tree.CommandTree.sync:15 of
msgid "The client does not have an application ID."
msgstr ""

#: discord.app_commands.tree.CommandTree.sync:17 of
msgid "The application's commands that got synced."
msgstr ""

#: discord.app_commands.tree.CommandTree.sync:18 of
msgid "List[:class:`AppCommand`]"
msgstr ""

#: discord.app_commands.tree.CommandTree.call:3 of
msgid ""
"Given an :class:`~discord.Interaction`, calls the matching application "
"command that's being invoked."
msgstr ""

#: discord.app_commands.tree.CommandTree.call:6 of
msgid "This is usually called automatically by the library."
msgstr ""

#: discord.app_commands.tree.CommandTree.call:8 of
msgid "The interaction to dispatch from."
msgstr ""

#: discord.app_commands.tree.CommandTree.call:11 of
msgid "The application command referred to could not be found."
msgstr ""

#: discord.app_commands.tree.CommandTree.call:12 of
msgid ""
"The interaction data referred to a parameter that was not found in the"
"     application command definition."
msgstr ""

#: discord.app_commands.tree.CommandTree.call:13 of
msgid "An error occurred while calling the command."
msgstr ""

#: ../../interactions/api.rst:425
msgid "Commands"
msgstr ""

#: ../../interactions/api.rst:428
msgid "Command"
msgstr ""

#: discord.app_commands.commands.Command:1 of
msgid "A class that implements an application command."
msgstr ""

#: discord.app_commands.commands.Command:3
#: discord.app_commands.commands.ContextMenu:3 of
msgid ""
"These are usually not created manually, instead they are created using "
"one of the following decorators:"
msgstr ""

#: discord.app_commands.commands.Command:6 of
msgid ":func:`~discord.app_commands.command`"
msgstr ""

#: discord.app_commands.commands.Command:7 of
msgid ":meth:`Group.command <discord.app_commands.Group.command>`"
msgstr ""

#: discord.app_commands.commands.Command:8 of
msgid ":meth:`CommandTree.command <discord.app_commands.CommandTree.command>`"
msgstr ""

#: discord.app_commands.commands.Command:14 of
msgid "The name of the application command."
msgstr ""

#: discord.app_commands.commands.Command:20 of
msgid "The coroutine that is executed when the command is called."
msgstr ""

#: discord.app_commands.commands.Command:22
#: discord.app_commands.commands.ContextMenu:21 of
msgid ":ref:`coroutine <coroutine>`"
msgstr ""

#: discord.app_commands.commands.Command:26 of
msgid ""
"The description of the application command. This shows up in the UI to "
"describe the application command."
msgstr ""

#: discord.app_commands.commands.Command:33 of
msgid "The parent application command. ``None`` if there isn't one."
msgstr ""

#: discord.app_commands.Command.root_parent:3
#: discord.app_commands.Group.root_parent:3
#: discord.app_commands.commands.Command:35
#: discord.app_commands.commands.Group:26 of
msgid "Optional[:class:`Group`]"
msgstr ""

#: discord.app_commands.Command.root_parent:1 of
msgid "The root parent of this command."
msgstr ""

#: discord.app_commands.commands.Command.error:1 of
msgid "A decorator that registers a coroutine as a local error handler."
msgstr ""

#: discord.app_commands.commands.Command.error:3 of
msgid ""
"The local error handler is called whenever an exception is raised in the "
"body of the command or during handling of the command. The error handler "
"must take 2 parameters, the interaction and the error."
msgstr ""

#: discord.app_commands.commands.Command.error:7 of
msgid "The error passed will be derived from :exc:`AppCommandError`."
msgstr ""

#: discord.app_commands.commands.Command.error:9 of
msgid "The coroutine to register as the local error handler."
msgstr ""

#: discord.app_commands.commands.Command.error:12 of
msgid "The coroutine passed is not actually a coroutine."
msgstr ""

#: discord.app_commands.commands.Command.autocomplete:1 of
msgid ""
"A decorator that registers a coroutine as an autocomplete prompt for a "
"parameter."
msgstr ""

#: discord.app_commands.commands.Command.autocomplete:3 of
msgid ""
"The coroutine callback must have 3 parameters, the "
":class:`~discord.Interaction`, the current value by the user (usually "
"either a :class:`str`, :class:`int`, or :class:`float`, depending on the "
"type of the parameter being marked as autocomplete), and then the "
":class:`Namespace` that represents possible values are partially filled "
"in."
msgstr ""

#: discord.app_commands.commands.Command.autocomplete:8 of
msgid ""
"The coroutine decorator **must** return a list of "
":class:`~discord.app_commands.Choice` objects. Only up to 25 objects are "
"supported."
msgstr ""

#: discord.app_commands.commands.Command.autocomplete:11
#: discord.app_commands.commands.choices:3
#: discord.app_commands.commands.describe:4 of
msgid "Example:"
msgstr ""

#: discord.app_commands.commands.Command.autocomplete:32 of
msgid "The parameter name to register as autocomplete."
msgstr ""

#: discord.app_commands.commands.Command.autocomplete:35 of
msgid ""
"The coroutine passed is not actually a coroutine or     the parameter is "
"not found or of an invalid type."
msgstr ""

#: ../../interactions/api.rst:436
msgid "ContextMenu"
msgstr ""

#: discord.app_commands.commands.ContextMenu:1 of
msgid "A class that implements a context menu application command."
msgstr ""

#: discord.app_commands.commands.ContextMenu:6 of
msgid ":func:`~discord.app_commands.context_menu`"
msgstr ""

#: discord.app_commands.commands.ContextMenu:7 of
msgid ""
":meth:`CommandTree.command "
"<discord.app_commands.CommandTree.context_menu>`"
msgstr ""

#: discord.app_commands.commands.ContextMenu:13 of
msgid "The name of the context menu."
msgstr ""

#: discord.app_commands.commands.ContextMenu:19 of
msgid "The coroutine that is executed when the context menu is called."
msgstr ""

#: discord.app_commands.commands.ContextMenu:25 of
msgid "The type of context menu application command."
msgstr ""

#: discord.app_commands.commands.ContextMenu:27 of
msgid ":class:`.AppCommandType`"
msgstr ""

#: ../../interactions/api.rst:444
msgid "Group"
msgstr ""

#: discord.app_commands.commands.Group:1 of
msgid "A class that implements an application command group."
msgstr ""

#: discord.app_commands.commands.Group:3 of
msgid "These are usually inherited rather than created manually."
msgstr ""

#: discord.app_commands.commands.Group:9 of
msgid ""
"The name of the group. If not given, it defaults to a lower-case kebab-"
"case version of the class name."
msgstr ""

#: discord.app_commands.commands.Group:16 of
msgid ""
"The description of the group. This shows up in the UI to describe the "
"group. If not given, it defaults to the docstring of the class shortened "
"to 100 characters."
msgstr ""

#: discord.app_commands.commands.Group:24 of
msgid "The parent group. ``None`` if there isn't one."
msgstr ""

#: discord.app_commands.Group.root_parent:1 of
msgid "The parent of this group."
msgstr ""

#: discord.app_commands.commands.Group.on_error:3 of
msgid ""
"A callback that is called when a child's command raises an "
":exc:`AppCommandError`."
msgstr ""

#: discord.app_commands.commands.Group.on_error:5 of
msgid "The default implementation does nothing."
msgstr ""

#: discord.app_commands.commands.Group.on_error:9
#: discord.app_commands.errors.CommandInvokeError:16 of
msgid "The command that failed."
msgstr ""

#: discord.app_commands.commands.Group.add_command:1 of
msgid "Adds a command or group to this group's internal list of commands."
msgstr ""

#: discord.app_commands.commands.Group.add_command:3 of
msgid "The command or group to add."
msgstr ""

#: discord.app_commands.commands.Group.add_command:5 of
msgid ""
"Whether to override a pre-existing command or group with the same name. "
"If ``False`` then an exception is raised."
msgstr ""

#: discord.app_commands.commands.Group.add_command:9 of
msgid ""
"The command or group is already registered. Note that the "
":attr:`CommandAlreadyRegistered.guild_id`     attribute will always be "
"``None`` in this case."
msgstr ""

#: discord.app_commands.commands.Group.add_command:10 of
msgid "There are too many commands already registered."
msgstr ""

#: discord.app_commands.commands.Group.add_command:11 of
msgid "The wrong command type was passed."
msgstr ""

#: discord.app_commands.commands.Group.remove_command:1 of
msgid "Remove a command or group from the internal list of commands."
msgstr ""

#: discord.app_commands.commands.Group.remove_command:3 of
msgid "The name of the command or group to remove."
msgstr ""

#: discord.app_commands.commands.Group.remove_command:6 of
msgid ""
"The command that was removed. If nothing was removed then ``None`` is "
"returned instead."
msgstr ""

#: discord.app_commands.commands.Group.get_command:8
#: discord.app_commands.commands.Group.remove_command:8 of
msgid ""
"Optional[Union[:class:`~discord.app_commands.Command`, "
":class:`~discord.app_commands.Group`]]"
msgstr ""

#: discord.app_commands.commands.Group.get_command:1 of
msgid "Retrieves a command or group from its name."
msgstr ""

#: discord.app_commands.commands.Group.get_command:3 of
msgid "The name of the command or group to retrieve."
msgstr ""

#: discord.app_commands.commands.Group.get_command:6 of
msgid ""
"The command or group that was retrieved. If nothing was found then "
"``None`` is returned instead."
msgstr ""

#: discord.app_commands.commands.Group.command:1 of
msgid "Creates an application command under this group."
msgstr ""

#: ../../interactions/api.rst:452
msgid "Decorators"
msgstr ""

#: discord.app_commands.commands.command:1 of
msgid "Creates an application command from a regular function."
msgstr ""

#: discord.app_commands.commands.context_menu:1 of
msgid "Creates a application command context menu from a regular function."
msgstr ""

#: discord.app_commands.commands.describe:1 of
msgid ""
"Describes the given parameters by their name using the key of the keyword"
" argument as the name."
msgstr ""

#: discord.app_commands.commands.describe:13 of
msgid "The description of the parameters."
msgstr ""

#: discord.app_commands.commands.describe:15 of
msgid "The parameter name is not found."
msgstr ""

#: discord.app_commands.commands.choices:1 of
msgid ""
"Instructs the given parameters by their name to use the given choices for"
" their choices."
msgstr ""

#: discord.app_commands.commands.choices:19 of
msgid ""
"This is not the only way to provide choices to a command. There are two "
"more ergonomic ways of doing this. The first one is to use a "
":obj:`typing.Literal` annotation:"
msgstr ""

#: discord.app_commands.commands.choices:29 of
msgid "The second way is to use an :class:`enum.Enum`:"
msgstr ""

#: discord.app_commands.commands.choices:44 of
msgid "The choices of the parameters."
msgstr ""

#: discord.app_commands.commands.choices:46 of
msgid "The parameter name is not found or the parameter type was incorrect."
msgstr ""

#: ../../interactions/api.rst:467
msgid "Namespace"
msgstr ""

#: discord.app_commands.namespace.Namespace:1 of
msgid ""
"An object that holds the parameters being passed to a command in a mostly"
" raw state."
msgstr ""

#: discord.app_commands.namespace.Namespace:3 of
msgid ""
"This class is deliberately simple and just holds the option name and "
"resolved value as a simple key-pair mapping. These attributes can be "
"accessed using dot notation. For example, an option with the name of "
"``example`` can be accessed using ``ns.example``."
msgstr ""

#: discord.app_commands.namespace.Namespace:13 of
msgid ""
"Checks if two namespaces are equal by checking if all attributes are "
"equal."
msgstr ""

#: discord.app_commands.namespace.Namespace:16 of
msgid "Checks if two namespaces are not equal."
msgstr ""

#: discord.app_commands.namespace.Namespace:18 of
msgid ""
"This namespace object converts resolved objects into their appropriate "
"form depending on their type. Consult the table below for conversion "
"information."
msgstr ""

#: discord.app_commands.namespace.Namespace:22 of
msgid "Option Type"
msgstr ""

#: discord.app_commands.namespace.Namespace:22 of
msgid "Resolved Type"
msgstr ""

#: discord.app_commands.namespace.Namespace:24 of
msgid ":attr:`.AppCommandOptionType.string`"
msgstr ""

#: discord.app_commands.namespace.Namespace:26 of
msgid ":attr:`.AppCommandOptionType.integer`"
msgstr ""

#: discord.app_commands.namespace.Namespace:28 of
msgid ":attr:`.AppCommandOptionType.boolean`"
msgstr ""

#: discord.app_commands.namespace.Namespace:30 of
msgid ":attr:`.AppCommandOptionType.number`"
msgstr ""

#: discord.app_commands.namespace.Namespace:30 of
msgid ":class:`float`"
msgstr ""

#: discord.app_commands.namespace.Namespace:32 of
msgid ":attr:`.AppCommandOptionType.user`"
msgstr ""

#: discord.app_commands.namespace.Namespace:32 of
msgid ":class:`~discord.User` or :class:`~discord.Member`"
msgstr ""

#: discord.app_commands.namespace.Namespace:34 of
msgid ":attr:`.AppCommandOptionType.channel`"
msgstr ""

#: discord.app_commands.namespace.Namespace:34 of
msgid ":class:`.AppCommandChannel` or :class:`.AppCommandThread`"
msgstr ""

#: discord.app_commands.namespace.Namespace:36 of
msgid ":attr:`.AppCommandOptionType.role`"
msgstr ""

#: discord.app_commands.namespace.Namespace:36 of
msgid ":class:`~discord.Role`"
msgstr ""

#: discord.app_commands.namespace.Namespace:38 of
msgid ":attr:`.AppCommandOptionType.mentionable`"
msgstr ""

#: discord.app_commands.namespace.Namespace:38 of
msgid ""
":class:`~discord.User` or :class:`~discord.Member`, or "
":class:`~discord.Role`"
msgstr ""

#: discord.app_commands.namespace.Namespace:40 of
msgid ":attr:`.AppCommandOptionType.attachment`"
msgstr ""

#: discord.app_commands.namespace.Namespace:40 of
msgid ":class:`~discord.Attachment`"
msgstr ""

#: ../../interactions/api.rst:475
msgid "Transformers"
msgstr ""

#: ../../interactions/api.rst:478
msgid "Transformer"
msgstr ""

#: discord.app_commands.transformers.Transformer:1 of
msgid ""
"The base class that allows a type annotation in an application command "
"parameter to map into a :class:`~discord.AppCommandOptionType` and "
"transform the raw value into one from this type."
msgstr ""

#: discord.app_commands.transformers.Transformer:5 of
msgid ""
"This class is customisable through the overriding of :func:`classmethod` "
"in the class and by using it as the second type parameter of the "
":class:`~discord.app_commands.Transform` class. For example, to convert a"
" string into a custom pair type:"
msgstr ""

#: discord.app_commands.transformers.Transformer.type:1 of
msgid ""
":class:`~discord.AppCommandOptionType`: The option type associated with "
"this transformer."
msgstr ""

#: discord.app_commands.transformers.Transformer.type:3 of
msgid "This must be a :obj:`classmethod`."
msgstr ""

#: discord.app_commands.transformers.Transformer.type:5 of
msgid "Defaults to :attr:`~discord.AppCommandOptionType.string`."
msgstr ""

#: discord.app_commands.transformers.Transformer.channel_types:1 of
msgid ""
"List[:class:`~discord.ChannelType`]: A list of channel types that are "
"allowed to this parameter."
msgstr ""

#: discord.app_commands.transformers.Transformer.channel_types:3 of
msgid ""
"Only valid if the :meth:`type` returns "
":attr:`~discord.AppCommandOptionType.channel`."
msgstr ""

#: discord.app_commands.transformers.Transformer.channel_types:5 of
msgid "Defaults to an empty list."
msgstr ""

#: discord.app_commands.transformers.Transformer.min_value:1 of
msgid "Optional[:class:`int`]: The minimum supported value for this parameter."
msgstr ""

#: discord.app_commands.transformers.Transformer.max_value:3
#: discord.app_commands.transformers.Transformer.min_value:3 of
msgid ""
"Only valid if the :meth:`type` returns "
":attr:`~discord.AppCommandOptionType.number` or "
":attr:`~discord.AppCommandOptionType.integer`."
msgstr ""

#: discord.app_commands.transformers.Transformer.max_value:6
#: discord.app_commands.transformers.Transformer.min_value:6 of
msgid "Defaults to ``None``."
msgstr ""

#: discord.app_commands.transformers.Transformer.max_value:1 of
msgid "Optional[:class:`int`]: The maximum supported value for this parameter."
msgstr ""

#: discord.app_commands.transformers.Transformer.transform:3 of
msgid "Transforms the converted option value into another value."
msgstr ""

#: discord.app_commands.transformers.Transformer.transform:5 of
msgid ""
"The value passed into this transform function is the same as the one in "
"the :class:`conversion table <discord.app_commands.Namespace>`."
msgstr ""

#: discord.app_commands.transformers.Transformer.transform:8 of
msgid "The interaction being handled."
msgstr ""

#: discord.app_commands.transformers.Transformer.transform:10 of
msgid ""
"The value of the given argument after being resolved. See the "
":class:`conversion table <discord.app_commands.Namespace>` for how "
"certain option types correspond to certain values."
msgstr ""

#: ../../interactions/api.rst:486
msgid "Transform"
msgstr ""

#: discord.app_commands.transformers.Transform:1 of
msgid ""
"A type annotation that can be applied to a parameter to customise the "
"behaviour of an option type by transforming with the given "
":class:`Transformer`. This requires the usage of two generic parameters, "
"the first one is the type you're converting to and the second one is the "
"type of the :class:`Transformer` actually doing the transformation."
msgstr ""

#: discord.app_commands.transformers.Range:4
#: discord.app_commands.transformers.Transform:6 of
msgid ""
"During type checking time this is equivalent to :obj:`typing.Annotated` "
"so type checkers understand the intent of the code."
msgstr ""

#: discord.app_commands.transformers.Transform:9 of
msgid "For example usage, check :class:`Transformer`."
msgstr ""

#: ../../interactions/api.rst:494
msgid "Range"
msgstr ""

#: discord.app_commands.transformers.Range:1 of
msgid ""
"A type annotation that can be applied to a parameter to require a numeric"
" type to fit within the range provided."
msgstr ""

#: discord.app_commands.transformers.Range:7 of
msgid "Some example ranges:"
msgstr ""

#: discord.app_commands.transformers.Range:9 of
msgid "``Range[int, 10]`` means the minimum is 10 with no maximum."
msgstr ""

#: discord.app_commands.transformers.Range:10 of
msgid "``Range[int, None, 10]`` means the maximum is 10 with no minimum."
msgstr ""

#: discord.app_commands.transformers.Range:11 of
msgid "``Range[int, 1, 10]`` means the minimum is 1 and the maximum is 10."
msgstr ""

#: ../../interactions/api.rst:502
msgid "Exceptions"
msgstr ""

#: discord.app_commands.errors.AppCommandError:1 of
msgid "The base exception type for all application command related errors."
msgstr ""

#: discord.app_commands.errors.AppCommandError:3 of
msgid "This inherits from :exc:`discord.DiscordException`."
msgstr ""

#: discord.app_commands.errors.AppCommandError:5 of
msgid ""
"This exception and exceptions inherited from it are handled in a special "
"way as they are caught and passed into various error handlers in this "
"order:"
msgstr ""

#: discord.app_commands.errors.AppCommandError:9 of
msgid ":meth:`Command.error <discord.app_commands.Command.error>`"
msgstr ""

#: discord.app_commands.errors.AppCommandError:10 of
msgid ":meth:`Group.on_error <discord.app_commands.Group.on_error>`"
msgstr ""

#: discord.app_commands.errors.AppCommandError:11 of
msgid ":meth:`CommandTree.on_error <discord.app_commands.CommandTree.on_error>`"
msgstr ""

#: discord.app_commands.errors.CommandInvokeError:1 of
msgid "An exception raised when the command being invoked raised an exception."
msgstr ""

#: discord.app_commands.errors.CommandAlreadyRegistered:3
#: discord.app_commands.errors.CommandInvokeError:3
#: discord.app_commands.errors.CommandNotFound:3
#: discord.app_commands.errors.CommandSignatureMismatch:6
#: discord.app_commands.errors.TransformerError:4 of
msgid "This inherits from :exc:`~discord.app_commands.AppCommandError`."
msgstr ""

#: discord.app_commands.errors.CommandInvokeError:9 of
msgid ""
"The original exception that was raised. You can also get this via the "
"``__cause__`` attribute."
msgstr ""

#: discord.app_commands.errors.CommandInvokeError:12 of
msgid ":exc:`Exception`"
msgstr ""

#: discord.app_commands.errors.CommandInvokeError:18 of
msgid "Union[:class:`Command`, :class:`ContextMenu`]"
msgstr ""

#: discord.app_commands.errors.TransformerError:1 of
msgid ""
"An exception raised when a :class:`Transformer` or type annotation fails "
"to convert to its target type."
msgstr ""

#: discord.app_commands.errors.TransformerError:8 of
msgid ""
"If the transformer raises a custom :exc:`AppCommandError` then it will be"
" propagated rather than wrapped into this exception."
msgstr ""

#: discord.app_commands.errors.TransformerError:15 of
msgid "The value that failed to convert."
msgstr ""

#: discord.app_commands.errors.TransformerError:17 of
msgid "Any"
msgstr ""

#: discord.app_commands.errors.TransformerError:21 of
msgid "The type of argument that failed to convert."
msgstr ""

#: discord.app_commands.errors.TransformerError:27 of
msgid "The transformer that failed the conversion."
msgstr ""

#: discord.app_commands.errors.TransformerError:29 of
msgid "Type[:class:`Transformer`]"
msgstr ""

#: discord.app_commands.errors.CommandAlreadyRegistered:1 of
msgid "An exception raised when a command is already registered."
msgstr ""

#: discord.app_commands.errors.CommandAlreadyRegistered:9 of
msgid "The name of the command already registered."
msgstr ""

#: discord.app_commands.errors.CommandAlreadyRegistered:15 of
msgid ""
"The guild ID this command was already registered at. If ``None`` then it "
"was a global command."
msgstr ""

#: discord.app_commands.errors.CommandSignatureMismatch:1 of
msgid ""
"An exception raised when an application command from Discord has a "
"different signature from the one provided in the code. This happens "
"because your command definition differs from the command definition you "
"provided Discord. Either your code is out of date or the data from "
"Discord is out of sync."
msgstr ""

#: discord.app_commands.errors.CommandSignatureMismatch:12 of
msgid "The command that had the signature mismatch."
msgstr ""

#: discord.app_commands.errors.CommandSignatureMismatch:14 of
msgid ""
"Union[:class:`~.app_commands.Command`, "
":class:`~.app_commands.ContextMenu`, :class:`~.app_commands.Group`]"
msgstr ""

#: discord.app_commands.errors.CommandNotFound:1 of
msgid "An exception raised when an application command could not be found."
msgstr ""

#: discord.app_commands.errors.CommandNotFound:9 of
msgid "The name of the application command not found."
msgstr ""

#: discord.app_commands.errors.CommandNotFound:15 of
msgid ""
"A list of parent command names that were previously found prior to the "
"application command not being found."
msgstr ""

#: discord.app_commands.errors.CommandNotFound:22 of
msgid "The type of command that was not found."
msgstr ""

#: ../../interactions/api.rst:523
msgid "Exception Hierarchy"
msgstr ""

#: ../../interactions/api.rst:532
msgid ":exc:`~discord.DiscordException`"
msgstr ""

#: ../../interactions/api.rst:532
msgid ":exc:`~discord.app_commands.AppCommandError`"
msgstr ""

#: ../../interactions/api.rst:529
msgid ":exc:`~discord.app_commands.CommandInvokeError`"
msgstr ""

#: ../../interactions/api.rst:530
msgid ":exc:`~discord.app_commands.TransformerError`"
msgstr ""

#: ../../interactions/api.rst:531
msgid ":exc:`~discord.app_commands.CommandAlreadyRegistered`"
msgstr ""

#: ../../interactions/api.rst:532
msgid ":exc:`~discord.app_commands.CommandSignatureMismatch`"
msgstr ""

#: ../../interactions/api.rst:533
msgid ":exc:`~discord.app_commands.CommandNotFound`"
msgstr ""

