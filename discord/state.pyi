import asyncio
import enum

from .abc import PrivateChannel, GuildChannel, Snowflake
from .emoji import Emoji, PartialEmoji
from .guild import Guild
from .http import HTTPClient
from .member import Member
from .message import Message
from .types import *
from .user import ClientUser, User
from .voice_client import VoiceClient

from typing import Any, Optional, Union, List, Tuple, Dict, Callable, Iterator, NamedTuple

class ListenerType(enum.Enum):
    chunk = 0

class Listener(NamedTuple):
    type: ListenerType
    future: asyncio.Future
    predicate: Callable[[Snowflake], bool]

class ReadyState(NamedTuple):
    launch: asyncio.Event
    guilds: List[Tuple[Guild, bool]]

class ConnectionState:
    loop: asyncio.AbstractEventLoop
    http: HTTPClient
    user: Optional[ClientUser]
    max_messages: int
    is_bot: Optional[bool]
    shard_count: Optional[int]

    def clear(self) -> None: ...

    @property
    def self_id(self) -> Optional[int]: ...

    @property
    def voice_clients(self) -> List[VoiceClient]: ...

    def store_user(self, data: RawUserDict) -> User: ...

    def get_user(self, id: int) -> Optional[User]: ...

    def store_emoji(self, guild: Guild, data: RawEmojiDict) -> Emoji: ...

    @property
    def guilds(self) -> List[Guild]: ...

    @property
    def emojis(self) -> List[Emoji]: ...

    def get_emoji(self, emoji_id: int) -> Optional[Emoji]: ...

    @property
    def private_channels(self) -> List[PrivateChannel]: ...

    def add_dm_channel(self, data: RawChannelDict) -> PrivateChannel: ...

    def chunks_needed(self, guild: Guild) -> Iterator[asyncio.Future]: ...

    async def request_offline_members(self, guilds: Union[Tuple[Guild], List[Guild]], *args: Any, **kwargs: Any) -> None: ...

    def parse_ready(self, data: RawReadyDict) -> None: ...

    def parse_resumed(self, data: Dict[str, Any]) -> None: ...

    def parse_message_create(self, data: RawMessageDict) -> None: ...

    def parse_message_delete(self, data: RawMessageDict) -> None: ...

    def parse_message_delete_bulk(self, data: RawBulkMessageDeleteDict) -> None: ...

    def parse_message_update(self, data: RawMessageDict) -> None: ...

    def parse_message_reaction_add(self, data: RawReactionActionDict) -> None: ...

    def parse_message_reaction_remove_all(self, data: RawReactionClearDict) -> None: ...

    def parse_message_reaction_remove(self, data: RawReactionActionDict) -> None: ...

    def parse_presence_update(self, data: RawPresenceUpdateDict) -> None: ...

    def parse_user_update(self, data: RawUserDict) -> None: ...

    def parse_channel_delete(self, data: RawChannelDict) -> None: ...

    def parse_channel_update(self, data: RawChannelDict) -> None: ...

    def parse_channel_create(self, data: RawChannelDict) -> None: ...

    def parse_channel_pins_update(self, data: RawChannelPinsDict) -> None: ...

    def parse_channel_recipient_add(self, data: Dict[str, Any]) -> None: ...

    def parse_channel_recipient_remove(self, data: Dict[str, Any]) -> None: ...

    def parse_guild_member_add(self, data: RawGuildMemberDict) -> None: ...

    def parse_guild_member_remove(self, data: RawGuildMemberRemoveDict) -> None: ...

    def parse_guild_member_update(self, data: RawGuildMemberUpdateDict) -> None: ...

    def parse_guild_emojis_update(self, data: RawGuildEmojisUpdateDict) -> None: ...

    def parse_guild_create(self, data: RawGuildDict) -> None: ...

    def parse_guild_sync(self, data: RawGuildDict) -> None: ...

    def parse_guild_update(self, data: RawGuildDict) -> None: ...

    def parse_guild_delete(self, data: RawGuildDict) -> None: ...

    def parse_guild_ban_add(self, data: RawGuildBanActionDict) -> None: ...

    def parse_guild_ban_remove(self, data: RawGuildBanActionDict) -> None: ...

    def parse_guild_role_create(self, data: RawGuildRoleActionDict) -> None: ...

    def parse_guild_role_delete(self, data: RawGuildRoleDeleteDict) -> None: ...

    def parse_guild_role_update(self, data: RawGuildRoleActionDict) -> None: ...

    def parse_guild_members_chunk(self, data: RawGuildMembersChunkDict) -> None: ...

    def parse_voice_state_update(self, data: RawVoiceStateDict) -> None: ...

    def parse_voice_server_update(self, data: RawVoiceServerUpdateDict) -> None: ...

    def parse_typing_start(self, data: RawTypingStartDict) -> None: ...

    def parse_relationship_add(self, data: Dict[str, Any]) -> None: ...

    def parse_relationship_remove(self, data: Dict[str, Any]) -> None: ...

    def get_reaction_emoji(self, data: Dict[str, Any]) -> Union[str, Emoji, PartialEmoji]: ...

    def get_channel(self, id: int) -> Optional[Union[PrivateChannel, GuildChannel]]: ...

    def create_message(self, *, channel: Union[PrivateChannel, GuildChannel], data: RawMessageDict) -> Message: ...

    def receive_chunk(self, guild_id: int) -> asyncio.Future: ...

class AutoShardedConnectionState(ConnectionState):
    async def request_offline_members(self, guilds: Tuple[Guild], *, shard_id: int) -> None: ...  # type: ignore

    def parse_ready(self, data: RawReadyDict) -> None: ...
