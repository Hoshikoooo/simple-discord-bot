import datetime
import asyncio
import aiohttp  # type: ignore
from .permissions import Permissions
from .guild import Guild

from typing import Any, Optional, Union, List, Iterable, TypeVar, Type, Callable, Coroutine, Generic, overload

T = TypeVar('T')
U_co = TypeVar('U_co', covariant=True)

_FuncType = Callable[..., Any]
_F = TypeVar('_F', bound=_FuncType)

DISCORD_EPOCH: int

class cached_property(Generic[T, U_co]):
    def __init__(self, function: Callable[[T], U_co]) -> None: ...

    @overload
    def __get__(self, instance: T, owner: Type[T]) -> U_co: ...
    @overload
    def __get__(self, instance: None, owner: Type[T]) -> 'cached_property[T, U_co]': ...

class CachedSlotProperty(Generic[T, U_co]):
    def __init__(self, name: str, function: Callable[[T], U_co]) -> None: ...

    @overload
    def __get__(self, instance: T, owner: Type[T]) -> U_co: ...
    @overload
    def __get__(self, instance: None, owner: Type[T]) -> 'CachedSlotProperty[T, U_co]': ...

def cached_slot_property(name: str) -> Callable[[Callable[[T], U_co]], CachedSlotProperty[T, U_co]]: ...

def parse_time(timestamp: Optional[str]) -> Optional[datetime.datetime]: ...

def deprecated(instead: Optional[str] = None) -> Callable[[_F], _F]: ...

def oauth_url(client_id: str,
              permissions: Optional[Permissions] = ...,
              guild: Optional[Guild] = ...,
              redirect_uri: Optional[str] = ...) -> str: ...

def snowflake_time(id: int) -> datetime.datetime: ...

def time_snowflake(datetime_obj: datetime.datetime, high: bool = ...) -> int: ...

def find(predicate: Callable[[T], bool], seq: Iterable[T]) -> Optional[T]: ...

def get(iterable: Iterable[T], **attrs: Any) -> Optional[T]: ...

def _unique(iterable: Iterable[T]) -> List[T]: ...

def _get_as_snowflake(data: Any, key: str) -> Optional[int]: ...

def _get_mime_type_for_image(data: Union[bytes, bytearray]) -> str: ...

def _bytes_to_base64_data(data: Union[bytes, bytearray]) -> str: ...

def to_json(obj: Any) -> str: ...

def _parse_ratelimit_header(request: aiohttp.Request) -> float: ...

async def maybe_coroutine(f: Callable[..., Union[T, Coroutine[Any, Any, T]]], *args: Any, **kwargs: Any) -> T: ...

async def async_all(gen: Iterable[Union[Any, Coroutine[Any, Any, Any]]], *, check: Callable[[Any], bool] = ...) -> bool: ...

async def sane_wait_for(futures: List[asyncio.Future], *, timeout: float, loop: asyncio.AbstractEventLoop) -> None: ...

def valid_icon_size(size: int) -> bool: ...
