from typing import Any, Optional, Union, List, Tuple, Iterator, Callable, TypeVar, Coroutine, Generic
from .core import Command
from .context import Context

_CT = TypeVar('_CT', bound=Context)
_L = TypeVar('_L', bound=Callable[..., Coroutine[Any, Any, Any]])

class CogMeta(type):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def qualified_name(cls) -> str: ...

class Cog(Generic[_CT], metaclass=CogMeta):
    __cog_commands__: Any = ...
    def get_commands(self) -> List[Command]: ...
    def walk_commands(self) -> Iterator[Command]: ...
    def get_listeners(self) -> List[Tuple[str, Callable[..., Any]]]: ...
    @classmethod
    def listener(cls, name: Optional[str] = ...) -> Callable[[_L], _L]: ...
    def cog_unload(self) -> None: ...
    def bot_check_once(self, ctx: Any) -> Union[bool, Coroutine[Any, Any, bool]]: ...
    def bot_check(self, ctx: Any) -> Union[bool, Coroutine[Any, Any, bool]]: ...
    def cog_check(self, ctx: Any) -> Union[bool, Coroutine[Any, Any, bool]]: ...
    def cog_command_error(self, ctx: Any, error: Any) -> Union[None, Coroutine[Any, Any, None]]: ...
    async def cog_before_invoke(self, ctx: Any) -> None: ...
    async def cog_after_invoke(self, ctx: Any) -> None: ...
